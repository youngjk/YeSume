{"ast":null,"code":"/**\n * stream.js: Transport for outputting to any arbitrary stream.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n'use strict';\n\nconst isStream = require('is-stream');\n\nconst {\n  MESSAGE\n} = require('triple-beam');\n\nconst os = require('os');\n\nconst TransportStream = require('winston-transport');\n/**\n * Transport for outputting to any arbitrary stream.\n * @type {Stream}\n * @extends {TransportStream}\n */\n\n\nmodule.exports = class Stream extends TransportStream {\n  /**\n   * Constructor function for the Console transport object responsible for\n   * persisting log messages and metadata to a terminal or TTY.\n   * @param {!Object} [options={}] - Options for this instance.\n   */\n  constructor(options = {}) {\n    super(options);\n\n    if (!options.stream || !isStream(options.stream)) {\n      throw new Error('options.stream is required.');\n    } // We need to listen for drain events when write() returns false. This can\n    // make node mad at times.\n\n\n    this._stream = options.stream;\n\n    this._stream.setMaxListeners(Infinity);\n\n    this.isObjectMode = options.stream._writableState.objectMode;\n    this.eol = options.eol || os.EOL;\n  }\n  /**\n   * Core logging method exposed to Winston.\n   * @param {Object} info - TODO: add param description.\n   * @param {Function} callback - TODO: add param description.\n   * @returns {undefined}\n   */\n\n\n  log(info, callback) {\n    setImmediate(() => this.emit('logged', info));\n\n    if (this.isObjectMode) {\n      this._stream.write(info);\n\n      if (callback) {\n        callback(); // eslint-disable-line callback-return\n      }\n\n      return;\n    }\n\n    this._stream.write(`${info[MESSAGE]}${this.eol}`);\n\n    if (callback) {\n      callback(); // eslint-disable-line callback-return\n    }\n\n    return;\n  }\n\n};","map":{"version":3,"sources":["/Users/pro/Desktop/Projects/yesume/src/node_test/node_modules/winston/lib/winston/transports/stream.js"],"names":["isStream","require","MESSAGE","os","TransportStream","module","exports","Stream","constructor","options","stream","Error","_stream","setMaxListeners","Infinity","isObjectMode","_writableState","objectMode","eol","EOL","log","info","callback","setImmediate","emit","write"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,WAAD,CAAxB;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAcD,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAME,EAAE,GAAGF,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMG,eAAe,GAAGH,OAAO,CAAC,mBAAD,CAA/B;AAEA;AACA;AACA;AACA;AACA;;;AACAI,MAAM,CAACC,OAAP,GAAiB,MAAMC,MAAN,SAAqBH,eAArB,CAAqC;AACpD;AACF;AACA;AACA;AACA;AACEI,EAAAA,WAAW,CAACC,OAAO,GAAG,EAAX,EAAe;AACxB,UAAMA,OAAN;;AAEA,QAAI,CAACA,OAAO,CAACC,MAAT,IAAmB,CAACV,QAAQ,CAACS,OAAO,CAACC,MAAT,CAAhC,EAAkD;AAChD,YAAM,IAAIC,KAAJ,CAAU,6BAAV,CAAN;AACD,KALuB,CAOxB;AACA;;;AACA,SAAKC,OAAL,GAAeH,OAAO,CAACC,MAAvB;;AACA,SAAKE,OAAL,CAAaC,eAAb,CAA6BC,QAA7B;;AACA,SAAKC,YAAL,GAAoBN,OAAO,CAACC,MAAR,CAAeM,cAAf,CAA8BC,UAAlD;AACA,SAAKC,GAAL,GAAWT,OAAO,CAACS,GAAR,IAAef,EAAE,CAACgB,GAA7B;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,GAAG,CAACC,IAAD,EAAOC,QAAP,EAAiB;AAClBC,IAAAA,YAAY,CAAC,MAAM,KAAKC,IAAL,CAAU,QAAV,EAAoBH,IAApB,CAAP,CAAZ;;AACA,QAAI,KAAKN,YAAT,EAAuB;AACrB,WAAKH,OAAL,CAAaa,KAAb,CAAmBJ,IAAnB;;AACA,UAAIC,QAAJ,EAAc;AACZA,QAAAA,QAAQ,GADI,CACA;AACb;;AACD;AACD;;AAED,SAAKV,OAAL,CAAaa,KAAb,CAAoB,GAAEJ,IAAI,CAACnB,OAAD,CAAU,GAAE,KAAKgB,GAAI,EAA/C;;AACA,QAAII,QAAJ,EAAc;AACZA,MAAAA,QAAQ,GADI,CACA;AACb;;AACD;AACD;;AA1CmD,CAAtD","sourcesContent":["/**\n * stream.js: Transport for outputting to any arbitrary stream.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst isStream = require('is-stream');\nconst { MESSAGE } = require('triple-beam');\nconst os = require('os');\nconst TransportStream = require('winston-transport');\n\n/**\n * Transport for outputting to any arbitrary stream.\n * @type {Stream}\n * @extends {TransportStream}\n */\nmodule.exports = class Stream extends TransportStream {\n  /**\n   * Constructor function for the Console transport object responsible for\n   * persisting log messages and metadata to a terminal or TTY.\n   * @param {!Object} [options={}] - Options for this instance.\n   */\n  constructor(options = {}) {\n    super(options);\n\n    if (!options.stream || !isStream(options.stream)) {\n      throw new Error('options.stream is required.');\n    }\n\n    // We need to listen for drain events when write() returns false. This can\n    // make node mad at times.\n    this._stream = options.stream;\n    this._stream.setMaxListeners(Infinity);\n    this.isObjectMode = options.stream._writableState.objectMode;\n    this.eol = options.eol || os.EOL;\n  }\n\n  /**\n   * Core logging method exposed to Winston.\n   * @param {Object} info - TODO: add param description.\n   * @param {Function} callback - TODO: add param description.\n   * @returns {undefined}\n   */\n  log(info, callback) {\n    setImmediate(() => this.emit('logged', info));\n    if (this.isObjectMode) {\n      this._stream.write(info);\n      if (callback) {\n        callback(); // eslint-disable-line callback-return\n      }\n      return;\n    }\n\n    this._stream.write(`${info[MESSAGE]}${this.eol}`);\n    if (callback) {\n      callback(); // eslint-disable-line callback-return\n    }\n    return;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}