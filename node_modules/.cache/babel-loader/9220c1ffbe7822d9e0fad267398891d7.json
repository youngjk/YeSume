{"ast":null,"code":"/* eslint-disable no-console */\n\n/*\n * console.js: Transport for outputting to the console.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n'use strict';\n\nconst os = require('os');\n\nconst {\n  LEVEL,\n  MESSAGE\n} = require('triple-beam');\n\nconst TransportStream = require('winston-transport');\n/**\n * Transport for outputting to the console.\n * @type {Console}\n * @extends {TransportStream}\n */\n\n\nmodule.exports = class Console extends TransportStream {\n  /**\n   * Constructor function for the Console transport object responsible for\n   * persisting log messages and metadata to a terminal or TTY.\n   * @param {!Object} [options={}] - Options for this instance.\n   */\n  constructor(options = {}) {\n    super(options); // Expose the name of this Transport on the prototype\n\n    this.name = options.name || 'console';\n    this.stderrLevels = this._stringArrayToSet(options.stderrLevels);\n    this.consoleWarnLevels = this._stringArrayToSet(options.consoleWarnLevels);\n    this.eol = options.eol || os.EOL;\n  }\n  /**\n   * Core logging method exposed to Winston.\n   * @param {Object} info - TODO: add param description.\n   * @param {Function} callback - TODO: add param description.\n   * @returns {undefined}\n   */\n\n\n  log(info, callback) {\n    setImmediate(() => this.emit('logged', info)); // Remark: what if there is no raw...?\n\n    if (this.stderrLevels[info[LEVEL]]) {\n      if (console._stderr) {\n        // Node.js maps `process.stderr` to `console._stderr`.\n        console._stderr.write(`${info[MESSAGE]}${this.eol}`);\n      } else {\n        // console.error adds a newline\n        console.error(info[MESSAGE]);\n      }\n\n      if (callback) {\n        callback(); // eslint-disable-line callback-return\n      }\n\n      return;\n    } else if (this.consoleWarnLevels[info[LEVEL]]) {\n      if (console._stderr) {\n        // Node.js maps `process.stderr` to `console._stderr`.\n        // in Node.js console.warn is an alias for console.error\n        console._stderr.write(`${info[MESSAGE]}${this.eol}`);\n      } else {\n        // console.warn adds a newline\n        console.warn(info[MESSAGE]);\n      }\n\n      if (callback) {\n        callback(); // eslint-disable-line callback-return\n      }\n\n      return;\n    }\n\n    if (console._stdout) {\n      // Node.js maps `process.stdout` to `console._stdout`.\n      console._stdout.write(`${info[MESSAGE]}${this.eol}`);\n    } else {\n      // console.log adds a newline.\n      console.log(info[MESSAGE]);\n    }\n\n    if (callback) {\n      callback(); // eslint-disable-line callback-return\n    }\n  }\n  /**\n   * Returns a Set-like object with strArray's elements as keys (each with the\n   * value true).\n   * @param {Array} strArray - Array of Set-elements as strings.\n   * @param {?string} [errMsg] - Custom error message thrown on invalid input.\n   * @returns {Object} - TODO: add return description.\n   * @private\n   */\n\n\n  _stringArrayToSet(strArray, errMsg) {\n    if (!strArray) return {};\n    errMsg = errMsg || 'Cannot make set from type other than Array of string elements';\n\n    if (!Array.isArray(strArray)) {\n      throw new Error(errMsg);\n    }\n\n    return strArray.reduce((set, el) => {\n      if (typeof el !== 'string') {\n        throw new Error(errMsg);\n      }\n\n      set[el] = true;\n      return set;\n    }, {});\n  }\n\n};","map":{"version":3,"sources":["/Users/pro/Desktop/Projects/yesume/node_modules/winston/lib/winston/transports/console.js"],"names":["os","require","LEVEL","MESSAGE","TransportStream","module","exports","Console","constructor","options","name","stderrLevels","_stringArrayToSet","consoleWarnLevels","eol","EOL","log","info","callback","setImmediate","emit","console","_stderr","write","error","warn","_stdout","strArray","errMsg","Array","isArray","Error","reduce","set","el"],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\n/*\n * console.js: Transport for outputting to the console.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst os = require('os');\nconst { LEVEL, MESSAGE } = require('triple-beam');\nconst TransportStream = require('winston-transport');\n\n/**\n * Transport for outputting to the console.\n * @type {Console}\n * @extends {TransportStream}\n */\nmodule.exports = class Console extends TransportStream {\n  /**\n   * Constructor function for the Console transport object responsible for\n   * persisting log messages and metadata to a terminal or TTY.\n   * @param {!Object} [options={}] - Options for this instance.\n   */\n  constructor(options = {}) {\n    super(options);\n\n    // Expose the name of this Transport on the prototype\n    this.name = options.name || 'console';\n    this.stderrLevels = this._stringArrayToSet(options.stderrLevels);\n    this.consoleWarnLevels = this._stringArrayToSet(options.consoleWarnLevels);\n    this.eol = options.eol || os.EOL;\n  }\n\n  /**\n   * Core logging method exposed to Winston.\n   * @param {Object} info - TODO: add param description.\n   * @param {Function} callback - TODO: add param description.\n   * @returns {undefined}\n   */\n  log(info, callback) {\n    setImmediate(() => this.emit('logged', info));\n\n    // Remark: what if there is no raw...?\n    if (this.stderrLevels[info[LEVEL]]) {\n      if (console._stderr) {\n        // Node.js maps `process.stderr` to `console._stderr`.\n        console._stderr.write(`${info[MESSAGE]}${this.eol}`);\n      } else {\n        // console.error adds a newline\n        console.error(info[MESSAGE]);\n      }\n\n      if (callback) {\n        callback(); // eslint-disable-line callback-return\n      }\n      return;\n    } else if (this.consoleWarnLevels[info[LEVEL]]) {\n      if (console._stderr) {\n        // Node.js maps `process.stderr` to `console._stderr`.\n        // in Node.js console.warn is an alias for console.error\n        console._stderr.write(`${info[MESSAGE]}${this.eol}`);\n      } else {\n        // console.warn adds a newline\n        console.warn(info[MESSAGE]);\n      }\n\n      if (callback) {\n        callback(); // eslint-disable-line callback-return\n      }\n      return;\n    }\n\n    if (console._stdout) {\n      // Node.js maps `process.stdout` to `console._stdout`.\n      console._stdout.write(`${info[MESSAGE]}${this.eol}`);\n    } else {\n      // console.log adds a newline.\n      console.log(info[MESSAGE]);\n    }\n\n    if (callback) {\n      callback(); // eslint-disable-line callback-return\n    }\n  }\n\n  /**\n   * Returns a Set-like object with strArray's elements as keys (each with the\n   * value true).\n   * @param {Array} strArray - Array of Set-elements as strings.\n   * @param {?string} [errMsg] - Custom error message thrown on invalid input.\n   * @returns {Object} - TODO: add return description.\n   * @private\n   */\n  _stringArrayToSet(strArray, errMsg) {\n    if (!strArray)\n      return {};\n\n    errMsg = errMsg || 'Cannot make set from type other than Array of string elements';\n\n    if (!Array.isArray(strArray)) {\n      throw new Error(errMsg);\n    }\n\n    return strArray.reduce((set, el) =>  {\n      if (typeof el !== 'string') {\n        throw new Error(errMsg);\n      }\n      set[el] = true;\n\n      return set;\n    }, {});\n  }\n};\n"]},"metadata":{},"sourceType":"script"}