{"ast":null,"code":"/**\n * winston.js: Top-level include defining Winston.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n'use strict';\n\nconst logform = require('logform');\n\nconst {\n  warn\n} = require('./winston/common');\n/**\n * Setup to expose.\n * @type {Object}\n */\n\n\nconst winston = exports;\n/**\n * Expose version. Use `require` method for `webpack` support.\n * @type {string}\n */\n\nwinston.version = require('../package.json').version;\n/**\n * Include transports defined by default by winston\n * @type {Array}\n */\n\nwinston.transports = require('./winston/transports');\n/**\n * Expose utility methods\n * @type {Object}\n */\n\nwinston.config = require('./winston/config');\n/**\n * Hoist format-related functionality from logform.\n * @type {Object}\n */\n\nwinston.addColors = logform.levels;\n/**\n * Hoist format-related functionality from logform.\n * @type {Object}\n */\n\nwinston.format = logform.format;\n/**\n * Expose core Logging-related prototypes.\n * @type {function}\n */\n\nwinston.createLogger = require('./winston/create-logger');\n/**\n * Expose core Logging-related prototypes.\n * @type {Object}\n */\n\nwinston.ExceptionHandler = require('./winston/exception-handler');\n/**\n * Expose core Logging-related prototypes.\n * @type {Container}\n */\n\nwinston.Container = require('./winston/container');\n/**\n * Expose core Logging-related prototypes.\n * @type {Object}\n */\n\nwinston.Transport = require('winston-transport');\n/**\n * We create and expose a default `Container` to `winston.loggers` so that the\n * programmer may manage multiple `winston.Logger` instances without any\n * additional overhead.\n * @example\n *   // some-file1.js\n *   const logger = require('winston').loggers.get('something');\n *\n *   // some-file2.js\n *   const logger = require('winston').loggers.get('something');\n */\n\nwinston.loggers = new winston.Container();\n/**\n * We create and expose a 'defaultLogger' so that the programmer may do the\n * following without the need to create an instance of winston.Logger directly:\n * @example\n *   const winston = require('winston');\n *   winston.log('info', 'some message');\n *   winston.error('some error');\n */\n\nconst defaultLogger = winston.createLogger(); // Pass through the target methods onto `winston.\n\nObject.keys(winston.config.npm.levels).concat(['log', 'query', 'stream', 'add', 'remove', 'clear', 'profile', 'startTimer', 'handleExceptions', 'unhandleExceptions', 'configure']).forEach(method => winston[method] = (...args) => defaultLogger[method](...args));\n/**\n * Define getter / setter for the default logger level which need to be exposed\n * by winston.\n * @type {string}\n */\n\nObject.defineProperty(winston, 'level', {\n  get() {\n    return defaultLogger.level;\n  },\n\n  set(val) {\n    defaultLogger.level = val;\n  }\n\n});\n/**\n * Define getter for `exceptions` which replaces `handleExceptions` and\n * `unhandleExceptions`.\n * @type {Object}\n */\n\nObject.defineProperty(winston, 'exceptions', {\n  get() {\n    return defaultLogger.exceptions;\n  }\n\n});\n/**\n * Define getters / setters for appropriate properties of the default logger\n * which need to be exposed by winston.\n * @type {Logger}\n */\n\n['exitOnError'].forEach(prop => {\n  Object.defineProperty(winston, prop, {\n    get() {\n      return defaultLogger[prop];\n    },\n\n    set(val) {\n      defaultLogger[prop] = val;\n    }\n\n  });\n});\n/**\n * The default transports and exceptionHandlers for the default winston logger.\n * @type {Object}\n */\n\nObject.defineProperty(winston, 'default', {\n  get() {\n    return {\n      exceptionHandlers: defaultLogger.exceptionHandlers,\n      transports: defaultLogger.transports\n    };\n  }\n\n}); // Have friendlier breakage notices for properties that were exposed by default\n// on winston < 3.0.\n\nwarn.deprecated(winston, 'setLevels');\nwarn.forFunctions(winston, 'useFormat', ['cli']);\nwarn.forProperties(winston, 'useFormat', ['padLevels', 'stripColors']);\nwarn.forFunctions(winston, 'deprecated', ['addRewriter', 'addFilter', 'clone', 'extend']);\nwarn.forProperties(winston, 'deprecated', ['emitErrs', 'levelLength']); // Throw a useful error when users attempt to run `new winston.Logger`.\n\nwarn.moved(winston, 'createLogger', 'Logger');","map":{"version":3,"sources":["/Users/pro/Desktop/Projects/yesume/node_modules/winston/lib/winston.js"],"names":["logform","require","warn","winston","exports","version","transports","config","addColors","levels","format","createLogger","ExceptionHandler","Container","Transport","loggers","defaultLogger","Object","keys","npm","concat","forEach","method","args","defineProperty","get","level","set","val","exceptions","prop","exceptionHandlers","deprecated","forFunctions","forProperties","moved"],"mappings":"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","sourcesContent":["/**\n * winston.js: Top-level include defining Winston.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst logform = require('logform');\nconst { warn } = require('./winston/common');\n\n/**\n * Setup to expose.\n * @type {Object}\n */\nconst winston = exports;\n\n/**\n * Expose version. Use `require` method for `webpack` support.\n * @type {string}\n */\nwinston.version = require('../package.json').version;\n/**\n * Include transports defined by default by winston\n * @type {Array}\n */\nwinston.transports = require('./winston/transports');\n/**\n * Expose utility methods\n * @type {Object}\n */\nwinston.config = require('./winston/config');\n/**\n * Hoist format-related functionality from logform.\n * @type {Object}\n */\nwinston.addColors = logform.levels;\n/**\n * Hoist format-related functionality from logform.\n * @type {Object}\n */\nwinston.format = logform.format;\n/**\n * Expose core Logging-related prototypes.\n * @type {function}\n */\nwinston.createLogger = require('./winston/create-logger');\n/**\n * Expose core Logging-related prototypes.\n * @type {Object}\n */\nwinston.ExceptionHandler = require('./winston/exception-handler');\n/**\n * Expose core Logging-related prototypes.\n * @type {Container}\n */\nwinston.Container = require('./winston/container');\n/**\n * Expose core Logging-related prototypes.\n * @type {Object}\n */\nwinston.Transport = require('winston-transport');\n/**\n * We create and expose a default `Container` to `winston.loggers` so that the\n * programmer may manage multiple `winston.Logger` instances without any\n * additional overhead.\n * @example\n *   // some-file1.js\n *   const logger = require('winston').loggers.get('something');\n *\n *   // some-file2.js\n *   const logger = require('winston').loggers.get('something');\n */\nwinston.loggers = new winston.Container();\n\n/**\n * We create and expose a 'defaultLogger' so that the programmer may do the\n * following without the need to create an instance of winston.Logger directly:\n * @example\n *   const winston = require('winston');\n *   winston.log('info', 'some message');\n *   winston.error('some error');\n */\nconst defaultLogger = winston.createLogger();\n\n// Pass through the target methods onto `winston.\nObject.keys(winston.config.npm.levels).concat([\n  'log',\n  'query',\n  'stream',\n  'add',\n  'remove',\n  'clear',\n  'profile',\n  'startTimer',\n  'handleExceptions',\n  'unhandleExceptions',\n  'configure'\n]).forEach(method => (\n  winston[method] = (...args) => defaultLogger[method](...args)\n));\n\n/**\n * Define getter / setter for the default logger level which need to be exposed\n * by winston.\n * @type {string}\n */\nObject.defineProperty(winston, 'level', {\n  get() {\n    return defaultLogger.level;\n  },\n  set(val) {\n    defaultLogger.level = val;\n  }\n});\n\n/**\n * Define getter for `exceptions` which replaces `handleExceptions` and\n * `unhandleExceptions`.\n * @type {Object}\n */\nObject.defineProperty(winston, 'exceptions', {\n  get() {\n    return defaultLogger.exceptions;\n  }\n});\n\n/**\n * Define getters / setters for appropriate properties of the default logger\n * which need to be exposed by winston.\n * @type {Logger}\n */\n[\n  'exitOnError'\n].forEach(prop => {\n  Object.defineProperty(winston, prop, {\n    get() {\n      return defaultLogger[prop];\n    },\n    set(val) {\n      defaultLogger[prop] = val;\n    }\n  });\n});\n\n/**\n * The default transports and exceptionHandlers for the default winston logger.\n * @type {Object}\n */\nObject.defineProperty(winston, 'default', {\n  get() {\n    return {\n      exceptionHandlers: defaultLogger.exceptionHandlers,\n      transports: defaultLogger.transports\n    };\n  }\n});\n\n// Have friendlier breakage notices for properties that were exposed by default\n// on winston < 3.0.\nwarn.deprecated(winston, 'setLevels');\nwarn.forFunctions(winston,  'useFormat',  ['cli']);\nwarn.forProperties(winston, 'useFormat',  [\n  'padLevels',\n  'stripColors'\n]);\nwarn.forFunctions(winston,  'deprecated', [\n  'addRewriter',\n  'addFilter',\n  'clone',\n  'extend'\n]);\nwarn.forProperties(winston, 'deprecated', [\n  'emitErrs',\n  'levelLength'\n]);\n// Throw a useful error when users attempt to run `new winston.Logger`.\nwarn.moved(winston, 'createLogger', 'Logger');\n"]},"metadata":{},"sourceType":"script"}