{"ast":null,"code":"const openPage = require('../openPage');\n\nconst scrapSection = require('../scrapSection');\n\nconst scrapAccomplishmentPanel = require('./scrapAccomplishmentPanel');\n\nconst scrollToPageBottom = require('./scrollToPageBottom');\n\nconst seeMoreButtons = require('./seeMoreButtons');\n\nconst contactInfo = require('./contactInfo');\n\nconst template = require('./profileScraperTemplate');\n\nconst cleanProfileData = require('./cleanProfileData');\n\nconst logger = require('../logger')(__filename);\n\nmodule.exports = async (browser, cookies, url, waitTimeToScrapMs = 500, hasToGetContactInfo = false, puppeteerAuthenticate = undefined) => {\n  logger.info(`starting scraping url: ${url}`);\n  const page = await openPage({\n    browser,\n    cookies,\n    url,\n    puppeteerAuthenticate\n  });\n  const profilePageIndicatorSelector = '.pv-profile-section';\n  await page.waitFor(profilePageIndicatorSelector, {\n    timeout: 5000\n  }).catch(() => {\n    //why doesn't throw error instead of continuing scraping?\n    //because it can be just a false negative meaning LinkedIn only changed that selector but everything else is fine :)\n    logger.warn('profile selector was not found');\n  });\n  logger.info('scrolling page to the bottom');\n  await scrollToPageBottom(page);\n\n  if (waitTimeToScrapMs) {\n    logger.info(`applying 1st delay`);\n    await new Promise(resolve => {\n      setTimeout(() => {\n        resolve();\n      }, waitTimeToScrapMs / 2);\n    });\n  }\n\n  await seeMoreButtons.clickAll(page);\n\n  if (waitTimeToScrapMs) {\n    logger.info(`applying 2nd (and last) delay`);\n    await new Promise(resolve => {\n      setTimeout(() => {\n        resolve();\n      }, waitTimeToScrapMs / 2);\n    });\n  }\n\n  const [profile] = await scrapSection(page, template.profile);\n  const [about] = await scrapSection(page, template.about);\n  const positions = await scrapSection(page, template.positions);\n  const educations = await scrapSection(page, template.educations);\n  const [recommendationsCount] = await scrapSection(page, template.recommendationsCount);\n  const recommendationsReceived = await scrapSection(page, template.recommendationsReceived);\n  const recommendationsGiven = await scrapSection(page, template.recommendationsGiven);\n  const skills = await scrapSection(page, template.skills);\n  const accomplishments = await scrapSection(page, template.accomplishments);\n  const courses = await scrapAccomplishmentPanel(page, 'courses');\n  const languages = await scrapAccomplishmentPanel(page, 'languages');\n  const projects = await scrapAccomplishmentPanel(page, 'projects');\n  const volunteerExperience = await scrapSection(page, template.volunteerExperience);\n  const peopleAlsoViewed = await scrapSection(page, template.peopleAlsoViewed);\n  const contact = hasToGetContactInfo ? await contactInfo(page) : [];\n  await page.close();\n  logger.info(`finished scraping url: ${url}`);\n  const rawProfile = {\n    profile,\n    about,\n    positions,\n    educations,\n    skills,\n    recommendations: {\n      givenCount: recommendationsCount ? recommendationsCount.given : \"0\",\n      receivedCount: recommendationsCount ? recommendationsCount.received : \"0\",\n      given: recommendationsReceived,\n      received: recommendationsGiven\n    },\n    accomplishments,\n    courses,\n    languages,\n    projects,\n    peopleAlsoViewed,\n    volunteerExperience,\n    contact\n  };\n  const cleanedProfile = cleanProfileData(rawProfile);\n  return cleanedProfile;\n};","map":{"version":3,"sources":["/Users/pro/Desktop/Projects/yesume/node_modules/scrapedin/src/profile/profile.js"],"names":["openPage","require","scrapSection","scrapAccomplishmentPanel","scrollToPageBottom","seeMoreButtons","contactInfo","template","cleanProfileData","logger","__filename","module","exports","browser","cookies","url","waitTimeToScrapMs","hasToGetContactInfo","puppeteerAuthenticate","undefined","info","page","profilePageIndicatorSelector","waitFor","timeout","catch","warn","Promise","resolve","setTimeout","clickAll","profile","about","positions","educations","recommendationsCount","recommendationsReceived","recommendationsGiven","skills","accomplishments","courses","languages","projects","volunteerExperience","peopleAlsoViewed","contact","close","rawProfile","recommendations","givenCount","given","receivedCount","received","cleanedProfile"],"mappings":"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","sourcesContent":["const openPage = require('../openPage')\nconst scrapSection = require('../scrapSection')\nconst scrapAccomplishmentPanel = require('./scrapAccomplishmentPanel')\nconst scrollToPageBottom = require('./scrollToPageBottom')\nconst seeMoreButtons = require('./seeMoreButtons')\nconst contactInfo = require('./contactInfo')\nconst template = require('./profileScraperTemplate')\nconst cleanProfileData = require('./cleanProfileData')\n\nconst logger = require('../logger')(__filename)\n\nmodule.exports = async (browser, cookies, url, waitTimeToScrapMs = 500, hasToGetContactInfo = false, puppeteerAuthenticate = undefined) => {\n  logger.info(`starting scraping url: ${url}`)\n\n  const page = await openPage({ browser, cookies, url, puppeteerAuthenticate })\n  const profilePageIndicatorSelector = '.pv-profile-section'\n  await page.waitFor(profilePageIndicatorSelector, { timeout: 5000 })\n    .catch(() => {\n      //why doesn't throw error instead of continuing scraping?\n      //because it can be just a false negative meaning LinkedIn only changed that selector but everything else is fine :)\n      logger.warn('profile selector was not found')\n    })\n\n  logger.info('scrolling page to the bottom')\n  await scrollToPageBottom(page)\n  \n  if(waitTimeToScrapMs) {\n    logger.info(`applying 1st delay`)\n    await new Promise((resolve) => { setTimeout(() => { resolve() }, waitTimeToScrapMs / 2)})\n  }\n\n  await seeMoreButtons.clickAll(page)\n\n  if(waitTimeToScrapMs) {\n    logger.info(`applying 2nd (and last) delay`)\n    await new Promise((resolve) => { setTimeout(() => { resolve() }, waitTimeToScrapMs / 2)})\n  }\n\n  const [profile] = await scrapSection(page, template.profile)\n  const [about] = await scrapSection(page, template.about)\n  const positions = await scrapSection(page, template.positions)\n  const educations = await scrapSection(page, template.educations)\n  const [recommendationsCount] = await scrapSection(page, template.recommendationsCount)\n  const recommendationsReceived = await scrapSection(page, template.recommendationsReceived)\n  const recommendationsGiven = await scrapSection(page, template.recommendationsGiven)\n  const skills = await scrapSection(page, template.skills)\n  const accomplishments = await scrapSection(page, template.accomplishments)\n  const courses = await scrapAccomplishmentPanel(page, 'courses')\n  const languages = await scrapAccomplishmentPanel(page, 'languages')\n  const projects = await scrapAccomplishmentPanel(page, 'projects')\n  const volunteerExperience = await scrapSection(page, template.volunteerExperience)\n  const peopleAlsoViewed = await scrapSection(page, template.peopleAlsoViewed)\n  const contact = hasToGetContactInfo ? await contactInfo(page) : []\n\n  await page.close()\n  logger.info(`finished scraping url: ${url}`)\n\n  const rawProfile = {\n    profile,\n    about,\n    positions,\n    educations,\n    skills,\n    recommendations: {\n      givenCount: recommendationsCount ? recommendationsCount.given : \"0\",\n      receivedCount: recommendationsCount ? recommendationsCount.received : \"0\",\n      given: recommendationsReceived,\n      received: recommendationsGiven\n    },\n    accomplishments,\n    courses,\n    languages,\n    projects,\n    peopleAlsoViewed,\n    volunteerExperience,\n    contact\n  }\n\n  const cleanedProfile = cleanProfileData(rawProfile)\n  return cleanedProfile\n}\n"]},"metadata":{},"sourceType":"script"}