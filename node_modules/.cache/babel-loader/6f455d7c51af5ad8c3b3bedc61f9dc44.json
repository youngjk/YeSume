{"ast":null,"code":"/**\n * Copyright 2018 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst {\n  helper\n} = require('./helper');\n/**\n * @implements {!Puppeteer.ConnectionTransport}\n */\n\n\nclass PipeTransport {\n  /**\n   * @param {!NodeJS.WritableStream} pipeWrite\n   * @param {!NodeJS.ReadableStream} pipeRead\n   */\n  constructor(pipeWrite, pipeRead) {\n    this._pipeWrite = pipeWrite;\n    this._pendingMessage = '';\n    this._eventListeners = [helper.addEventListener(pipeRead, 'data', buffer => this._dispatch(buffer)), helper.addEventListener(pipeRead, 'close', () => {\n      if (this.onclose) this.onclose.call(null);\n    })];\n    this.onmessage = null;\n    this.onclose = null;\n  }\n  /**\n   * @param {string} message\n   */\n\n\n  send(message) {\n    this._pipeWrite.write(message);\n\n    this._pipeWrite.write('\\0');\n  }\n  /**\n   * @param {!Buffer} buffer\n   */\n\n\n  _dispatch(buffer) {\n    let end = buffer.indexOf('\\0');\n\n    if (end === -1) {\n      this._pendingMessage += buffer.toString();\n      return;\n    }\n\n    const message = this._pendingMessage + buffer.toString(undefined, 0, end);\n    if (this.onmessage) this.onmessage.call(null, message);\n    let start = end + 1;\n    end = buffer.indexOf('\\0', start);\n\n    while (end !== -1) {\n      if (this.onmessage) this.onmessage.call(null, buffer.toString(undefined, start, end));\n      start = end + 1;\n      end = buffer.indexOf('\\0', start);\n    }\n\n    this._pendingMessage = buffer.toString(undefined, start);\n  }\n\n  close() {\n    this._pipeWrite = null;\n    helper.removeEventListeners(this._eventListeners);\n  }\n\n}\n\nmodule.exports = PipeTransport;","map":{"version":3,"sources":["/Users/pro/Desktop/Projects/yesume/src/node_test/node_modules/puppeteer/lib/PipeTransport.js"],"names":["helper","require","PipeTransport","constructor","pipeWrite","pipeRead","_pipeWrite","_pendingMessage","_eventListeners","addEventListener","buffer","_dispatch","onclose","call","onmessage","send","message","write","end","indexOf","toString","undefined","start","close","removeEventListeners","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AAACA,EAAAA;AAAD,IAAWC,OAAO,CAAC,UAAD,CAAxB;AAEA;AACA;AACA;;;AACA,MAAMC,aAAN,CAAoB;AAClB;AACF;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,SAAD,EAAYC,QAAZ,EAAsB;AAC/B,SAAKC,UAAL,GAAkBF,SAAlB;AACA,SAAKG,eAAL,GAAuB,EAAvB;AACA,SAAKC,eAAL,GAAuB,CACrBR,MAAM,CAACS,gBAAP,CAAwBJ,QAAxB,EAAkC,MAAlC,EAA0CK,MAAM,IAAI,KAAKC,SAAL,CAAeD,MAAf,CAApD,CADqB,EAErBV,MAAM,CAACS,gBAAP,CAAwBJ,QAAxB,EAAkC,OAAlC,EAA2C,MAAM;AAC/C,UAAI,KAAKO,OAAT,EACE,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB;AACH,KAHD,CAFqB,CAAvB;AAOA,SAAKC,SAAL,GAAiB,IAAjB;AACA,SAAKF,OAAL,GAAe,IAAf;AACD;AAED;AACF;AACA;;;AACEG,EAAAA,IAAI,CAACC,OAAD,EAAU;AACZ,SAAKV,UAAL,CAAgBW,KAAhB,CAAsBD,OAAtB;;AACA,SAAKV,UAAL,CAAgBW,KAAhB,CAAsB,IAAtB;AACD;AAED;AACF;AACA;;;AACEN,EAAAA,SAAS,CAACD,MAAD,EAAS;AAChB,QAAIQ,GAAG,GAAGR,MAAM,CAACS,OAAP,CAAe,IAAf,CAAV;;AACA,QAAID,GAAG,KAAK,CAAC,CAAb,EAAgB;AACd,WAAKX,eAAL,IAAwBG,MAAM,CAACU,QAAP,EAAxB;AACA;AACD;;AACD,UAAMJ,OAAO,GAAG,KAAKT,eAAL,GAAuBG,MAAM,CAACU,QAAP,CAAgBC,SAAhB,EAA2B,CAA3B,EAA8BH,GAA9B,CAAvC;AACA,QAAI,KAAKJ,SAAT,EACE,KAAKA,SAAL,CAAeD,IAAf,CAAoB,IAApB,EAA0BG,OAA1B;AAEF,QAAIM,KAAK,GAAGJ,GAAG,GAAG,CAAlB;AACAA,IAAAA,GAAG,GAAGR,MAAM,CAACS,OAAP,CAAe,IAAf,EAAqBG,KAArB,CAAN;;AACA,WAAOJ,GAAG,KAAK,CAAC,CAAhB,EAAmB;AACjB,UAAI,KAAKJ,SAAT,EACE,KAAKA,SAAL,CAAeD,IAAf,CAAoB,IAApB,EAA0BH,MAAM,CAACU,QAAP,CAAgBC,SAAhB,EAA2BC,KAA3B,EAAkCJ,GAAlC,CAA1B;AACFI,MAAAA,KAAK,GAAGJ,GAAG,GAAG,CAAd;AACAA,MAAAA,GAAG,GAAGR,MAAM,CAACS,OAAP,CAAe,IAAf,EAAqBG,KAArB,CAAN;AACD;;AACD,SAAKf,eAAL,GAAuBG,MAAM,CAACU,QAAP,CAAgBC,SAAhB,EAA2BC,KAA3B,CAAvB;AACD;;AAEDC,EAAAA,KAAK,GAAG;AACN,SAAKjB,UAAL,GAAkB,IAAlB;AACAN,IAAAA,MAAM,CAACwB,oBAAP,CAA4B,KAAKhB,eAAjC;AACD;;AAtDiB;;AAyDpBiB,MAAM,CAACC,OAAP,GAAiBxB,aAAjB","sourcesContent":["/**\n * Copyright 2018 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst {helper} = require('./helper');\n\n/**\n * @implements {!Puppeteer.ConnectionTransport}\n */\nclass PipeTransport {\n  /**\n   * @param {!NodeJS.WritableStream} pipeWrite\n   * @param {!NodeJS.ReadableStream} pipeRead\n   */\n  constructor(pipeWrite, pipeRead) {\n    this._pipeWrite = pipeWrite;\n    this._pendingMessage = '';\n    this._eventListeners = [\n      helper.addEventListener(pipeRead, 'data', buffer => this._dispatch(buffer)),\n      helper.addEventListener(pipeRead, 'close', () => {\n        if (this.onclose)\n          this.onclose.call(null);\n      })\n    ];\n    this.onmessage = null;\n    this.onclose = null;\n  }\n\n  /**\n   * @param {string} message\n   */\n  send(message) {\n    this._pipeWrite.write(message);\n    this._pipeWrite.write('\\0');\n  }\n\n  /**\n   * @param {!Buffer} buffer\n   */\n  _dispatch(buffer) {\n    let end = buffer.indexOf('\\0');\n    if (end === -1) {\n      this._pendingMessage += buffer.toString();\n      return;\n    }\n    const message = this._pendingMessage + buffer.toString(undefined, 0, end);\n    if (this.onmessage)\n      this.onmessage.call(null, message);\n\n    let start = end + 1;\n    end = buffer.indexOf('\\0', start);\n    while (end !== -1) {\n      if (this.onmessage)\n        this.onmessage.call(null, buffer.toString(undefined, start, end));\n      start = end + 1;\n      end = buffer.indexOf('\\0', start);\n    }\n    this._pendingMessage = buffer.toString(undefined, start);\n  }\n\n  close() {\n    this._pipeWrite = null;\n    helper.removeEventListeners(this._eventListeners);\n  }\n}\n\nmodule.exports = PipeTransport;\n"]},"metadata":{},"sourceType":"module"}