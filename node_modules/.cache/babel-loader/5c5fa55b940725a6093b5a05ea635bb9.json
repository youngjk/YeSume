{"ast":null,"code":"/**\n * exception-stream.js: TODO: add file header handler.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n'use strict';\n\nconst Writable = require('readable-stream/writable');\n/**\n * TODO: add class description.\n * @type {ExceptionStream}\n * @extends {Writable}\n */\n\n\nmodule.exports = class ExceptionStream extends Writable {\n  /**\n   * Constructor function for the ExceptionStream responsible for wrapping a\n   * TransportStream; only allowing writes of `info` objects with\n   * `info.exception` set to true.\n   * @param {!TransportStream} transport - Stream to filter to exceptions\n   */\n  constructor(transport) {\n    super({\n      objectMode: true\n    });\n\n    if (!transport) {\n      throw new Error('ExceptionStream requires a TransportStream instance.');\n    } // Remark (indexzero): we set `handleExceptions` here because it's the\n    // predicate checked in ExceptionHandler.prototype.__getExceptionHandlers\n\n\n    this.handleExceptions = true;\n    this.transport = transport;\n  }\n  /**\n   * Writes the info object to our transport instance if (and only if) the\n   * `exception` property is set on the info.\n   * @param {mixed} info - TODO: add param description.\n   * @param {mixed} enc - TODO: add param description.\n   * @param {mixed} callback - TODO: add param description.\n   * @returns {mixed} - TODO: add return description.\n   * @private\n   */\n\n\n  _write(info, enc, callback) {\n    if (info.exception) {\n      return this.transport.log(info, callback);\n    }\n\n    callback();\n    return true;\n  }\n\n};","map":{"version":3,"sources":["/Users/pro/Desktop/Projects/yesume/node_modules/winston/lib/winston/exception-stream.js"],"names":["Writable","require","module","exports","ExceptionStream","constructor","transport","objectMode","Error","handleExceptions","_write","info","enc","callback","exception","log"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,0BAAD,CAAxB;AAEA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,MAAMC,eAAN,SAA8BJ,QAA9B,CAAuC;AACtD;AACF;AACA;AACA;AACA;AACA;AACEK,EAAAA,WAAW,CAACC,SAAD,EAAY;AACrB,UAAM;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAAN;;AAEA,QAAI,CAACD,SAAL,EAAgB;AACd,YAAM,IAAIE,KAAJ,CAAU,sDAAV,CAAN;AACD,KALoB,CAOrB;AACA;;;AACA,SAAKC,gBAAL,GAAwB,IAAxB;AACA,SAAKH,SAAL,GAAiBA,SAAjB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEI,EAAAA,MAAM,CAACC,IAAD,EAAOC,GAAP,EAAYC,QAAZ,EAAsB;AAC1B,QAAIF,IAAI,CAACG,SAAT,EAAoB;AAClB,aAAO,KAAKR,SAAL,CAAeS,GAAf,CAAmBJ,IAAnB,EAAyBE,QAAzB,CAAP;AACD;;AAEDA,IAAAA,QAAQ;AACR,WAAO,IAAP;AACD;;AApCqD,CAAxD","sourcesContent":["/**\n * exception-stream.js: TODO: add file header handler.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst Writable = require('readable-stream/writable');\n\n/**\n * TODO: add class description.\n * @type {ExceptionStream}\n * @extends {Writable}\n */\nmodule.exports = class ExceptionStream extends Writable {\n  /**\n   * Constructor function for the ExceptionStream responsible for wrapping a\n   * TransportStream; only allowing writes of `info` objects with\n   * `info.exception` set to true.\n   * @param {!TransportStream} transport - Stream to filter to exceptions\n   */\n  constructor(transport) {\n    super({ objectMode: true });\n\n    if (!transport) {\n      throw new Error('ExceptionStream requires a TransportStream instance.');\n    }\n\n    // Remark (indexzero): we set `handleExceptions` here because it's the\n    // predicate checked in ExceptionHandler.prototype.__getExceptionHandlers\n    this.handleExceptions = true;\n    this.transport = transport;\n  }\n\n  /**\n   * Writes the info object to our transport instance if (and only if) the\n   * `exception` property is set on the info.\n   * @param {mixed} info - TODO: add param description.\n   * @param {mixed} enc - TODO: add param description.\n   * @param {mixed} callback - TODO: add param description.\n   * @returns {mixed} - TODO: add return description.\n   * @private\n   */\n  _write(info, enc, callback) {\n    if (info.exception) {\n      return this.transport.log(info, callback);\n    }\n\n    callback();\n    return true;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}