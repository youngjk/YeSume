{"ast":null,"code":"/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @template T\n * @template V\n */\nclass Multimap {\n  constructor() {\n    this._map = new Map();\n  }\n  /**\n   * @param {T} key\n   * @param {V} value\n   */\n\n\n  set(key, value) {\n    let set = this._map.get(key);\n\n    if (!set) {\n      set = new Set();\n\n      this._map.set(key, set);\n    }\n\n    set.add(value);\n  }\n  /**\n   * @param {T} key\n   * @return {!Set<V>}\n   */\n\n\n  get(key) {\n    let result = this._map.get(key);\n\n    if (!result) result = new Set();\n    return result;\n  }\n  /**\n   * @param {T} key\n   * @return {boolean}\n   */\n\n\n  has(key) {\n    return this._map.has(key);\n  }\n  /**\n   * @param {T} key\n   * @param {V} value\n   * @return {boolean}\n   */\n\n\n  hasValue(key, value) {\n    const set = this._map.get(key);\n\n    if (!set) return false;\n    return set.has(value);\n  }\n  /**\n   * @return {number}\n   */\n\n\n  get size() {\n    return this._map.size;\n  }\n  /**\n   * @param {T} key\n   * @param {V} value\n   * @return {boolean}\n   */\n\n\n  delete(key, value) {\n    const values = this.get(key);\n    const result = values.delete(value);\n    if (!values.size) this._map.delete(key);\n    return result;\n  }\n  /**\n   * @param {T} key\n   */\n\n\n  deleteAll(key) {\n    this._map.delete(key);\n  }\n  /**\n   * @param {T} key\n   * @return {V}\n   */\n\n\n  firstValue(key) {\n    const set = this._map.get(key);\n\n    if (!set) return null;\n    return set.values().next().value;\n  }\n  /**\n   * @return {T}\n   */\n\n\n  firstKey() {\n    return this._map.keys().next().value;\n  }\n  /**\n   * @return {!Array<V>}\n   */\n\n\n  valuesArray() {\n    const result = [];\n\n    for (const key of this._map.keys()) result.push(...Array.from(this._map.get(key).values()));\n\n    return result;\n  }\n  /**\n   * @return {!Array<T>}\n   */\n\n\n  keysArray() {\n    return Array.from(this._map.keys());\n  }\n\n  clear() {\n    this._map.clear();\n  }\n\n}\n\nmodule.exports = Multimap;","map":{"version":3,"sources":["/Users/pro/Desktop/Projects/yesume/node_modules/puppeteer/lib/Multimap.js"],"names":["Multimap","constructor","_map","Map","set","key","value","get","Set","add","result","has","hasValue","size","delete","values","deleteAll","firstValue","next","firstKey","keys","valuesArray","push","Array","from","keysArray","clear","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * @template T\n * @template V\n */\nclass Multimap {\n  constructor() {\n    this._map = new Map();\n  }\n\n  /**\n   * @param {T} key\n   * @param {V} value\n   */\n  set(key, value) {\n    let set = this._map.get(key);\n    if (!set) {\n      set = new Set();\n      this._map.set(key, set);\n    }\n    set.add(value);\n  }\n\n  /**\n   * @param {T} key\n   * @return {!Set<V>}\n   */\n  get(key) {\n    let result = this._map.get(key);\n    if (!result)\n      result = new Set();\n    return result;\n  }\n\n  /**\n   * @param {T} key\n   * @return {boolean}\n   */\n  has(key) {\n    return this._map.has(key);\n  }\n\n  /**\n   * @param {T} key\n   * @param {V} value\n   * @return {boolean}\n   */\n  hasValue(key, value) {\n    const set = this._map.get(key);\n    if (!set)\n      return false;\n    return set.has(value);\n  }\n\n  /**\n   * @return {number}\n   */\n  get size() {\n    return this._map.size;\n  }\n\n  /**\n   * @param {T} key\n   * @param {V} value\n   * @return {boolean}\n   */\n  delete(key, value) {\n    const values = this.get(key);\n    const result = values.delete(value);\n    if (!values.size)\n      this._map.delete(key);\n    return result;\n  }\n\n  /**\n   * @param {T} key\n   */\n  deleteAll(key) {\n    this._map.delete(key);\n  }\n\n  /**\n   * @param {T} key\n   * @return {V}\n   */\n  firstValue(key) {\n    const set = this._map.get(key);\n    if (!set)\n      return null;\n    return set.values().next().value;\n  }\n\n  /**\n   * @return {T}\n   */\n  firstKey() {\n    return this._map.keys().next().value;\n  }\n\n  /**\n   * @return {!Array<V>}\n   */\n  valuesArray() {\n    const result = [];\n    for (const key of this._map.keys())\n      result.push(...Array.from(this._map.get(key).values()));\n    return result;\n  }\n\n  /**\n   * @return {!Array<T>}\n   */\n  keysArray() {\n    return Array.from(this._map.keys());\n  }\n\n  clear() {\n    this._map.clear();\n  }\n}\n\nmodule.exports = Multimap;\n"]},"metadata":{},"sourceType":"script"}