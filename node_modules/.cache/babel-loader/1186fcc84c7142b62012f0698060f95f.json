{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar util = require('util');\n\nvar _require = require('triple-beam'),\n    SPLAT = _require.SPLAT;\n/**\n * Captures the number of format (i.e. %s strings) in a given string.\n * Based on `util.format`, see Node.js source:\n * https://github.com/nodejs/node/blob/b1c8f15c5f169e021f7c46eb7b219de95fe97603/lib/util.js#L201-L230\n * @type {RegExp}\n */\n\n\nvar formatRegExp = /%[scdjifoO%]/g;\n/**\n * Captures the number of escaped % signs in a format string (i.e. %s strings).\n * @type {RegExp}\n */\n\nvar escapedPercent = /%%/g;\n\nvar Splatter = function () {\n  function Splatter(opts) {\n    _classCallCheck(this, Splatter);\n\n    this.options = opts;\n  }\n  /**\n     * Check to see if tokens <= splat.length, assign { splat, meta } into the\n     * `info` accordingly, and write to this instance.\n     *\n     * @param  {Info} info Logform info message.\n     * @param  {String[]} tokens Set of string interpolation tokens.\n     * @returns {Info} Modified info message\n     * @private\n     */\n\n\n  _createClass(Splatter, [{\n    key: '_splat',\n    value: function _splat(info, tokens) {\n      var msg = info.message;\n      var splat = info[SPLAT] || info.splat || [];\n      var percents = msg.match(escapedPercent);\n      var escapes = percents && percents.length || 0; // The expected splat is the number of tokens minus the number of escapes\n      // e.g.\n      // - { expectedSplat: 3 } '%d %s %j'\n      // - { expectedSplat: 5 } '[%s] %d%% %d%% %s %j'\n      //\n      // Any \"meta\" will be arugments in addition to the expected splat size\n      // regardless of type. e.g.\n      //\n      // logger.log('info', '%d%% %s %j', 100, 'wow', { such: 'js' }, { thisIsMeta: true });\n      // would result in splat of four (4), but only three (3) are expected. Therefore:\n      //\n      // extraSplat = 3 - 4 = -1\n      // metas = [100, 'wow', { such: 'js' }, { thisIsMeta: true }].splice(-1, -1 * -1);\n      // splat = [100, 'wow', { such: 'js' }]\n\n      var expectedSplat = tokens.length - escapes;\n      var extraSplat = expectedSplat - splat.length;\n      var metas = extraSplat < 0 ? splat.splice(extraSplat, -1 * extraSplat) : []; // Now that { splat } has been separated from any potential { meta }. we\n      // can assign this to the `info` object and write it to our format stream.\n\n      if (metas.length === 1) {\n        info.meta = metas[0];\n      } else if (metas.length) {\n        info.meta = metas;\n      }\n\n      info.message = util.format.apply(util, [msg].concat(_toConsumableArray(splat)));\n      return info;\n    }\n    /**\n       * Transforms the `info` message by using `util.format` to complete\n       * any `info.message` provided it has string interpolation tokens.\n       * If no tokens exist then `info` is immutable.\n       *\n       * @param  {Info} info Logform info message.\n       * @param  {Object} opts Options for this instance.\n       * @returns {Info} Modified info message\n       */\n\n  }, {\n    key: 'transform',\n    value: function transform(info) {\n      var msg = info.message;\n      var splat = info[SPLAT] || info.splat; // No need to process anything if splat is undefined\n\n      if (!splat || !splat.length) {\n        return info;\n      } // Extract tokens, if none available default to empty array to\n      // ensure consistancy in expected results\n\n\n      var tokens = msg && msg.match && msg.match(formatRegExp); // This condition will take care of inputs with info[SPLAT]\n      // but no tokens present\n\n      if (!tokens && (splat || splat.length)) {\n        var metas = splat.length > 1 ? splat.splice(0) : splat; // Now that { splat } has been separated from any potential { meta }. we\n        // can assign this to the `info` object and write it to our format stream.\n\n        if (metas.length === 1) {\n          info.meta = metas[0];\n        } else if (metas.length) {\n          info.meta = metas;\n        }\n\n        return info;\n      }\n\n      if (tokens) {\n        return this._splat(info, tokens);\n      }\n\n      return info;\n    }\n  }]);\n\n  return Splatter;\n}();\n/*\n * function splat (info)\n * Returns a new instance of the splat format TransformStream\n * which performs string interpolation from `info` objects. This was\n * previously exposed implicitly in `winston < 3.0.0`.\n */\n\n\nmodule.exports = function (opts) {\n  return new Splatter(opts);\n};","map":{"version":3,"sources":["/Users/pro/Desktop/Projects/yesume/src/node_test/node_modules/logform/dist/splat.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_toConsumableArray","arr","Array","isArray","arr2","from","_classCallCheck","instance","TypeError","util","require","_require","SPLAT","formatRegExp","escapedPercent","Splatter","opts","options","value","_splat","info","tokens","msg","message","splat","percents","match","escapes","expectedSplat","extraSplat","metas","splice","meta","format","apply","concat","transform","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar util = require('util');\n\nvar _require = require('triple-beam'),\n    SPLAT = _require.SPLAT;\n\n/**\n * Captures the number of format (i.e. %s strings) in a given string.\n * Based on `util.format`, see Node.js source:\n * https://github.com/nodejs/node/blob/b1c8f15c5f169e021f7c46eb7b219de95fe97603/lib/util.js#L201-L230\n * @type {RegExp}\n */\n\n\nvar formatRegExp = /%[scdjifoO%]/g;\n\n/**\n * Captures the number of escaped % signs in a format string (i.e. %s strings).\n * @type {RegExp}\n */\nvar escapedPercent = /%%/g;\n\nvar Splatter = function () {\n  function Splatter(opts) {\n    _classCallCheck(this, Splatter);\n\n    this.options = opts;\n  }\n\n  /**\n     * Check to see if tokens <= splat.length, assign { splat, meta } into the\n     * `info` accordingly, and write to this instance.\n     *\n     * @param  {Info} info Logform info message.\n     * @param  {String[]} tokens Set of string interpolation tokens.\n     * @returns {Info} Modified info message\n     * @private\n     */\n\n\n  _createClass(Splatter, [{\n    key: '_splat',\n    value: function _splat(info, tokens) {\n      var msg = info.message;\n      var splat = info[SPLAT] || info.splat || [];\n      var percents = msg.match(escapedPercent);\n      var escapes = percents && percents.length || 0;\n\n      // The expected splat is the number of tokens minus the number of escapes\n      // e.g.\n      // - { expectedSplat: 3 } '%d %s %j'\n      // - { expectedSplat: 5 } '[%s] %d%% %d%% %s %j'\n      //\n      // Any \"meta\" will be arugments in addition to the expected splat size\n      // regardless of type. e.g.\n      //\n      // logger.log('info', '%d%% %s %j', 100, 'wow', { such: 'js' }, { thisIsMeta: true });\n      // would result in splat of four (4), but only three (3) are expected. Therefore:\n      //\n      // extraSplat = 3 - 4 = -1\n      // metas = [100, 'wow', { such: 'js' }, { thisIsMeta: true }].splice(-1, -1 * -1);\n      // splat = [100, 'wow', { such: 'js' }]\n      var expectedSplat = tokens.length - escapes;\n      var extraSplat = expectedSplat - splat.length;\n      var metas = extraSplat < 0 ? splat.splice(extraSplat, -1 * extraSplat) : [];\n\n      // Now that { splat } has been separated from any potential { meta }. we\n      // can assign this to the `info` object and write it to our format stream.\n      if (metas.length === 1) {\n        info.meta = metas[0];\n      } else if (metas.length) {\n        info.meta = metas;\n      }\n\n      info.message = util.format.apply(util, [msg].concat(_toConsumableArray(splat)));\n      return info;\n    }\n\n    /**\n       * Transforms the `info` message by using `util.format` to complete\n       * any `info.message` provided it has string interpolation tokens.\n       * If no tokens exist then `info` is immutable.\n       *\n       * @param  {Info} info Logform info message.\n       * @param  {Object} opts Options for this instance.\n       * @returns {Info} Modified info message\n       */\n\n  }, {\n    key: 'transform',\n    value: function transform(info) {\n      var msg = info.message;\n      var splat = info[SPLAT] || info.splat;\n\n      // No need to process anything if splat is undefined\n      if (!splat || !splat.length) {\n        return info;\n      }\n\n      // Extract tokens, if none available default to empty array to\n      // ensure consistancy in expected results\n      var tokens = msg && msg.match && msg.match(formatRegExp);\n\n      // This condition will take care of inputs with info[SPLAT]\n      // but no tokens present\n      if (!tokens && (splat || splat.length)) {\n        var metas = splat.length > 1 ? splat.splice(0) : splat;\n\n        // Now that { splat } has been separated from any potential { meta }. we\n        // can assign this to the `info` object and write it to our format stream.\n        if (metas.length === 1) {\n          info.meta = metas[0];\n        } else if (metas.length) {\n          info.meta = metas;\n        }\n        return info;\n      }\n\n      if (tokens) {\n        return this._splat(info, tokens);\n      }\n\n      return info;\n    }\n  }]);\n\n  return Splatter;\n}();\n\n/*\n * function splat (info)\n * Returns a new instance of the splat format TransformStream\n * which performs string interpolation from `info` objects. This was\n * previously exposed implicitly in `winston < 3.0.0`.\n */\n\n\nmodule.exports = function (opts) {\n  return new Splatter(opts);\n};"]},"metadata":{},"sourceType":"module"}