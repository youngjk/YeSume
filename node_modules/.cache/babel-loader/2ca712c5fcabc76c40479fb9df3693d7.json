{"ast":null,"code":"/**\n * container.js: Inversion of control container for winston logger instances.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n'use strict';\n\nconst createLogger = require('./create-logger');\n/**\n * Inversion of control container for winston logger instances.\n * @type {Container}\n */\n\n\nmodule.exports = class Container {\n  /**\n   * Constructor function for the Container object responsible for managing a\n   * set of `winston.Logger` instances based on string ids.\n   * @param {!Object} [options={}] - Default pass-thru options for Loggers.\n   */\n  constructor(options = {}) {\n    this.loggers = new Map();\n    this.options = options;\n  }\n  /**\n   * Retreives a `winston.Logger` instance for the specified `id`. If an\n   * instance does not exist, one is created.\n   * @param {!string} id - The id of the Logger to get.\n   * @param {?Object} [options] - Options for the Logger instance.\n   * @returns {Logger} - A configured Logger instance with a specified id.\n   */\n\n\n  add(id, options) {\n    if (!this.loggers.has(id)) {\n      // Remark: Simple shallow clone for configuration options in case we pass\n      // in instantiated protoypal objects\n      options = Object.assign({}, options || this.options);\n      const existing = options.transports || this.options.transports; // Remark: Make sure if we have an array of transports we slice it to\n      // make copies of those references.\n\n      options.transports = existing ? existing.slice() : [];\n      const logger = createLogger(options);\n      logger.on('close', () => this._delete(id));\n      this.loggers.set(id, logger);\n    }\n\n    return this.loggers.get(id);\n  }\n  /**\n   * Retreives a `winston.Logger` instance for the specified `id`. If\n   * an instance does not exist, one is created.\n   * @param {!string} id - The id of the Logger to get.\n   * @param {?Object} [options] - Options for the Logger instance.\n   * @returns {Logger} - A configured Logger instance with a specified id.\n   */\n\n\n  get(id, options) {\n    return this.add(id, options);\n  }\n  /**\n   * Check if the container has a logger with the id.\n   * @param {?string} id - The id of the Logger instance to find.\n   * @returns {boolean} - Boolean value indicating if this instance has a\n   * logger with the specified `id`.\n   */\n\n\n  has(id) {\n    return !!this.loggers.has(id);\n  }\n  /**\n   * Closes a `Logger` instance with the specified `id` if it exists.\n   * If no `id` is supplied then all Loggers are closed.\n   * @param {?string} id - The id of the Logger instance to close.\n   * @returns {undefined}\n   */\n\n\n  close(id) {\n    if (id) {\n      return this._removeLogger(id);\n    }\n\n    this.loggers.forEach((val, key) => this._removeLogger(key));\n  }\n  /**\n   * Remove a logger based on the id.\n   * @param {!string} id - The id of the logger to remove.\n   * @returns {undefined}\n   * @private\n   */\n\n\n  _removeLogger(id) {\n    if (!this.loggers.has(id)) {\n      return;\n    }\n\n    const logger = this.loggers.get(id);\n    logger.close();\n\n    this._delete(id);\n  }\n  /**\n   * Deletes a `Logger` instance with the specified `id`.\n   * @param {!string} id - The id of the Logger instance to delete from\n   * container.\n   * @returns {undefined}\n   * @private\n   */\n\n\n  _delete(id) {\n    this.loggers.delete(id);\n  }\n\n};","map":{"version":3,"sources":["/Users/pro/Desktop/Projects/yesume/src/node_test/node_modules/winston/lib/winston/container.js"],"names":["createLogger","require","module","exports","Container","constructor","options","loggers","Map","add","id","has","Object","assign","existing","transports","slice","logger","on","_delete","set","get","close","_removeLogger","forEach","val","key","delete"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,YAAY,GAAGC,OAAO,CAAC,iBAAD,CAA5B;AAEA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,MAAMC,SAAN,CAAgB;AAC/B;AACF;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAACC,OAAO,GAAG,EAAX,EAAe;AACxB,SAAKC,OAAL,GAAe,IAAIC,GAAJ,EAAf;AACA,SAAKF,OAAL,GAAeA,OAAf;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEG,EAAAA,GAAG,CAACC,EAAD,EAAKJ,OAAL,EAAc;AACf,QAAI,CAAC,KAAKC,OAAL,CAAaI,GAAb,CAAiBD,EAAjB,CAAL,EAA2B;AACzB;AACA;AACAJ,MAAAA,OAAO,GAAGM,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBP,OAAO,IAAI,KAAKA,OAAlC,CAAV;AACA,YAAMQ,QAAQ,GAAGR,OAAO,CAACS,UAAR,IAAsB,KAAKT,OAAL,CAAaS,UAApD,CAJyB,CAMzB;AACA;;AACAT,MAAAA,OAAO,CAACS,UAAR,GAAqBD,QAAQ,GAAGA,QAAQ,CAACE,KAAT,EAAH,GAAsB,EAAnD;AAEA,YAAMC,MAAM,GAAGjB,YAAY,CAACM,OAAD,CAA3B;AACAW,MAAAA,MAAM,CAACC,EAAP,CAAU,OAAV,EAAmB,MAAM,KAAKC,OAAL,CAAaT,EAAb,CAAzB;AACA,WAAKH,OAAL,CAAaa,GAAb,CAAiBV,EAAjB,EAAqBO,MAArB;AACD;;AAED,WAAO,KAAKV,OAAL,CAAac,GAAb,CAAiBX,EAAjB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEW,EAAAA,GAAG,CAACX,EAAD,EAAKJ,OAAL,EAAc;AACf,WAAO,KAAKG,GAAL,CAASC,EAAT,EAAaJ,OAAb,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEK,EAAAA,GAAG,CAACD,EAAD,EAAK;AACN,WAAO,CAAC,CAAC,KAAKH,OAAL,CAAaI,GAAb,CAAiBD,EAAjB,CAAT;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEY,EAAAA,KAAK,CAACZ,EAAD,EAAK;AACR,QAAIA,EAAJ,EAAQ;AACN,aAAO,KAAKa,aAAL,CAAmBb,EAAnB,CAAP;AACD;;AAED,SAAKH,OAAL,CAAaiB,OAAb,CAAqB,CAACC,GAAD,EAAMC,GAAN,KAAc,KAAKH,aAAL,CAAmBG,GAAnB,CAAnC;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEH,EAAAA,aAAa,CAACb,EAAD,EAAK;AAChB,QAAI,CAAC,KAAKH,OAAL,CAAaI,GAAb,CAAiBD,EAAjB,CAAL,EAA2B;AACzB;AACD;;AAED,UAAMO,MAAM,GAAG,KAAKV,OAAL,CAAac,GAAb,CAAiBX,EAAjB,CAAf;AACAO,IAAAA,MAAM,CAACK,KAAP;;AACA,SAAKH,OAAL,CAAaT,EAAb;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACES,EAAAA,OAAO,CAACT,EAAD,EAAK;AACV,SAAKH,OAAL,CAAaoB,MAAb,CAAoBjB,EAApB;AACD;;AAjG8B,CAAjC","sourcesContent":["/**\n * container.js: Inversion of control container for winston logger instances.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst createLogger = require('./create-logger');\n\n/**\n * Inversion of control container for winston logger instances.\n * @type {Container}\n */\nmodule.exports = class Container {\n  /**\n   * Constructor function for the Container object responsible for managing a\n   * set of `winston.Logger` instances based on string ids.\n   * @param {!Object} [options={}] - Default pass-thru options for Loggers.\n   */\n  constructor(options = {}) {\n    this.loggers = new Map();\n    this.options = options;\n  }\n\n  /**\n   * Retreives a `winston.Logger` instance for the specified `id`. If an\n   * instance does not exist, one is created.\n   * @param {!string} id - The id of the Logger to get.\n   * @param {?Object} [options] - Options for the Logger instance.\n   * @returns {Logger} - A configured Logger instance with a specified id.\n   */\n  add(id, options) {\n    if (!this.loggers.has(id)) {\n      // Remark: Simple shallow clone for configuration options in case we pass\n      // in instantiated protoypal objects\n      options = Object.assign({}, options || this.options);\n      const existing = options.transports || this.options.transports;\n\n      // Remark: Make sure if we have an array of transports we slice it to\n      // make copies of those references.\n      options.transports = existing ? existing.slice() : [];\n\n      const logger = createLogger(options);\n      logger.on('close', () => this._delete(id));\n      this.loggers.set(id, logger);\n    }\n\n    return this.loggers.get(id);\n  }\n\n  /**\n   * Retreives a `winston.Logger` instance for the specified `id`. If\n   * an instance does not exist, one is created.\n   * @param {!string} id - The id of the Logger to get.\n   * @param {?Object} [options] - Options for the Logger instance.\n   * @returns {Logger} - A configured Logger instance with a specified id.\n   */\n  get(id, options) {\n    return this.add(id, options);\n  }\n\n  /**\n   * Check if the container has a logger with the id.\n   * @param {?string} id - The id of the Logger instance to find.\n   * @returns {boolean} - Boolean value indicating if this instance has a\n   * logger with the specified `id`.\n   */\n  has(id) {\n    return !!this.loggers.has(id);\n  }\n\n  /**\n   * Closes a `Logger` instance with the specified `id` if it exists.\n   * If no `id` is supplied then all Loggers are closed.\n   * @param {?string} id - The id of the Logger instance to close.\n   * @returns {undefined}\n   */\n  close(id) {\n    if (id) {\n      return this._removeLogger(id);\n    }\n\n    this.loggers.forEach((val, key) => this._removeLogger(key));\n  }\n\n  /**\n   * Remove a logger based on the id.\n   * @param {!string} id - The id of the logger to remove.\n   * @returns {undefined}\n   * @private\n   */\n  _removeLogger(id) {\n    if (!this.loggers.has(id)) {\n      return;\n    }\n\n    const logger = this.loggers.get(id);\n    logger.close();\n    this._delete(id);\n  }\n\n  /**\n   * Deletes a `Logger` instance with the specified `id`.\n   * @param {!string} id - The id of the Logger instance to delete from\n   * container.\n   * @returns {undefined}\n   * @private\n   */\n  _delete(id) {\n    this.loggers.delete(id);\n  }\n};\n"]},"metadata":{},"sourceType":"module"}