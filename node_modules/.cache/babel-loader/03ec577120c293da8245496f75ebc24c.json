{"ast":null,"code":"/**\n * logger.js: TODO: add file header description.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n'use strict';\n\nconst stream = require('readable-stream');\n\nconst asyncForEach = require('async/forEach');\n\nconst {\n  LEVEL,\n  SPLAT\n} = require('triple-beam');\n\nconst isStream = require('is-stream');\n\nconst ExceptionHandler = require('./exception-handler');\n\nconst LegacyTransportStream = require('winston-transport/legacy');\n\nconst Profiler = require('./profiler');\n\nconst {\n  clone,\n  warn\n} = require('./common');\n\nconst config = require('./config');\n/**\n * TODO: add class description.\n * @type {Logger}\n * @extends {stream.Transform}\n */\n\n\nclass Logger extends stream.Transform {\n  /**\n   * Constructor function for the Logger object responsible for persisting log\n   * messages and metadata to one or more transports.\n   * @param {!Object} options - foo\n   */\n  constructor(options) {\n    super({\n      objectMode: true\n    });\n    this.configure(options);\n  }\n  /**\n   * This will wholesale reconfigure this instance by:\n   * 1. Resetting all transports. Older transports will be removed implicitly.\n   * 2. Set all other options including levels, colors, rewriters, filters,\n   *    exceptionHandlers, etc.\n   * @param {!Object} options - TODO: add param description.\n   * @returns {undefined}\n   */\n\n\n  configure({\n    silent,\n    format,\n    levels,\n    level = 'info',\n    exitOnError = true,\n    transports,\n    colors,\n    emitErrs,\n    formatters,\n    padLevels,\n    rewriters,\n    stripColors,\n    exceptionHandlers\n  } = {}) {\n    // Reset transports if we already have them\n    if (this.transports.length) {\n      this.clear();\n    }\n\n    this.silent = silent;\n    this.format = format || this.format || require('logform/json')(); // Hoist other options onto this instance.\n\n    this.levels = levels || this.levels || config.npm.levels;\n    this.level = level;\n    this.exceptions = new ExceptionHandler(this);\n    this.profilers = {};\n    this.exitOnError = exitOnError; // Add all transports we have been provided.\n\n    if (transports) {\n      transports = Array.isArray(transports) ? transports : [transports];\n      transports.forEach(transport => this.add(transport));\n    }\n\n    if (colors || emitErrs || formatters || padLevels || rewriters || stripColors) {\n      throw new Error(['{ colors, emitErrs, formatters, padLevels, rewriters, stripColors } were removed in winston@3.0.0.', 'Use a custom winston.format(function) instead.', 'See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md'].join('\\n'));\n    }\n\n    if (exceptionHandlers) {\n      this.exceptions.handle(exceptionHandlers);\n    }\n  }\n\n  isLevelEnabled(level) {\n    const givenLevelValue = getLevelValue(this.levels, level);\n\n    if (givenLevelValue === null) {\n      return false;\n    }\n\n    const configuredLevelValue = getLevelValue(this.levels, this.level);\n\n    if (configuredLevelValue === null) {\n      return false;\n    }\n\n    if (!this.transports || this.transports.length === 0) {\n      return configuredLevelValue >= givenLevelValue;\n    }\n\n    const index = this.transports.findIndex(transport => {\n      let transportLevelValue = getLevelValue(this.levels, transport.level);\n\n      if (transportLevelValue === null) {\n        transportLevelValue = configuredLevelValue;\n      }\n\n      return transportLevelValue >= givenLevelValue;\n    });\n    return index !== -1;\n  }\n  /* eslint-disable valid-jsdoc */\n\n  /**\n   * Ensure backwards compatibility with a `log` method\n   * @param {mixed} level - Level the log message is written at.\n   * @param {mixed} msg - TODO: add param description.\n   * @param {mixed} meta - TODO: add param description.\n   * @returns {Logger} - TODO: add return description.\n   *\n   * @example\n   *    // Supports the existing API:\n   *    logger.log('info', 'Hello world', { custom: true });\n   *    logger.log('info', new Error('Yo, it\\'s on fire'));\n   *    logger.log('info', '%s %d%%', 'A string', 50, { thisIsMeta: true });\n   *\n   *    // And the new API with a single JSON literal:\n   *    logger.log({ level: 'info', message: 'Hello world', custom: true });\n   *    logger.log({ level: 'info', message: new Error('Yo, it\\'s on fire') });\n   *    logger.log({\n   *      level: 'info',\n   *      message: '%s %d%%',\n   *      [SPLAT]: ['A string', 50],\n   *      meta: { thisIsMeta: true }\n   *    });\n   *\n   */\n\n  /* eslint-enable valid-jsdoc */\n\n\n  log(level, msg, ...splat) {\n    // eslint-disable-line max-params\n    // Optimize for the hotpath of logging JSON literals\n    if (arguments.length === 1) {\n      // Yo dawg, I heard you like levels ... seriously ...\n      // In this context the LHS `level` here is actually the `info` so read\n      // this as: info[LEVEL] = info.level;\n      level[LEVEL] = level.level;\n      this.write(level);\n      return this;\n    } // Slightly less hotpath, but worth optimizing for.\n\n\n    if (arguments.length === 2) {\n      if (msg && typeof msg === 'object') {\n        msg[LEVEL] = msg.level = level;\n        this.write(msg);\n        return this;\n      }\n\n      this.write({\n        [LEVEL]: level,\n        level,\n        message: msg\n      });\n      return this;\n    }\n\n    const [meta] = splat;\n\n    if (typeof meta === 'object' && meta !== null) {\n      this.write(Object.assign({}, meta, {\n        [LEVEL]: level,\n        [SPLAT]: splat.slice(0),\n        level,\n        message: msg\n      }));\n    } else {\n      this.write(Object.assign({}, {\n        [LEVEL]: level,\n        [SPLAT]: splat,\n        level,\n        message: msg\n      }));\n    }\n\n    return this;\n  }\n  /**\n   * Pushes data so that it can be picked up by all of our pipe targets.\n   * @param {mixed} info - TODO: add param description.\n   * @param {mixed} enc - TODO: add param description.\n   * @param {mixed} callback - Continues stream processing.\n   * @returns {undefined}\n   * @private\n   */\n\n\n  _transform(info, enc, callback) {\n    if (this.silent) {\n      return callback();\n    } // [LEVEL] is only soft guaranteed to be set here since we are a proper\n    // stream. It is likely that `info` came in through `.log(info)` or\n    // `.info(info)`. If it is not defined, however, define it.\n    // This LEVEL symbol is provided by `triple-beam` and also used in:\n    // - logform\n    // - winston-transport\n    // - abstract-winston-transport\n\n\n    if (!info[LEVEL]) {\n      info[LEVEL] = info.level;\n    } // Remark: really not sure what to do here, but this has been reported as\n    // very confusing by pre winston@2.0.0 users as quite confusing when using\n    // custom levels.\n\n\n    if (!this.levels[info[LEVEL]] && this.levels[info[LEVEL]] !== 0) {\n      // eslint-disable-next-line no-console\n      console.error('[winston] Unknown logger level: %s', info[LEVEL]);\n    } // Remark: not sure if we should simply error here.\n\n\n    if (!this._readableState.pipes) {\n      // eslint-disable-next-line no-console\n      console.error('[winston] Attempt to write logs with no transports %j', info);\n    } // Here we write to the `format` pipe-chain, which on `readable` above will\n    // push the formatted `info` Object onto the buffer for this instance. We trap\n    // (and re-throw) any errors generated by the user-provided format, but also\n    // guarantee that the streams callback is invoked so that we can continue flowing.\n\n\n    try {\n      this.push(this.format.transform(info, this.format.options));\n    } catch (ex) {\n      throw ex;\n    } finally {\n      // eslint-disable-next-line callback-return\n      callback();\n    }\n  }\n  /**\n   * Delays the 'finish' event until all transport pipe targets have\n   * also emitted 'finish' or are already finished.\n   * @param {mixed} callback - Continues stream processing.\n   */\n\n\n  _final(callback) {\n    const transports = this.transports.slice();\n    asyncForEach(transports, (transport, next) => {\n      if (!transport || transport.finished) return setImmediate(next);\n      transport.once('finish', next);\n      transport.end();\n    }, callback);\n  }\n  /**\n   * Adds the transport to this logger instance by piping to it.\n   * @param {mixed} transport - TODO: add param description.\n   * @returns {Logger} - TODO: add return description.\n   */\n\n\n  add(transport) {\n    // Support backwards compatibility with all existing `winston < 3.x.x`\n    // transports which meet one of two criteria:\n    // 1. They inherit from winston.Transport in  < 3.x.x which is NOT a stream.\n    // 2. They expose a log method which has a length greater than 2 (i.e. more then\n    //    just `log(info, callback)`.\n    const target = !isStream(transport) || transport.log.length > 2 ? new LegacyTransportStream({\n      transport\n    }) : transport;\n\n    if (!target._writableState || !target._writableState.objectMode) {\n      throw new Error('Transports must WritableStreams in objectMode. Set { objectMode: true }.');\n    } // Listen for the `error` event on the new Transport.\n\n\n    this._onError(target);\n\n    this.pipe(target);\n\n    if (transport.handleExceptions) {\n      this.exceptions.handle();\n    }\n\n    return this;\n  }\n  /**\n   * Removes the transport from this logger instance by unpiping from it.\n   * @param {mixed} transport - TODO: add param description.\n   * @returns {Logger} - TODO: add return description.\n   */\n\n\n  remove(transport) {\n    let target = transport;\n\n    if (!isStream(transport) || transport.log.length > 2) {\n      target = this.transports.filter(match => match.transport === transport)[0];\n    }\n\n    if (target) {\n      this.unpipe(target);\n    }\n\n    return this;\n  }\n  /**\n   * Removes all transports from this logger instance.\n   * @returns {Logger} - TODO: add return description.\n   */\n\n\n  clear() {\n    this.unpipe();\n    return this;\n  }\n  /**\n   * Cleans up resources (streams, event listeners) for all transports\n   * associated with this instance (if necessary).\n   * @returns {Logger} - TODO: add return description.\n   */\n\n\n  close() {\n    this.clear();\n    this.emit('close');\n    return this;\n  }\n  /**\n   * Sets the `target` levels specified on this instance.\n   * @param {Object} Target levels to use on this instance.\n   */\n\n\n  setLevels() {\n    warn.deprecated('setLevels');\n  }\n  /**\n   * Queries the all transports for this instance with the specified `options`.\n   * This will aggregate each transport's results into one object containing\n   * a property per transport.\n   * @param {Object} options - Query options for this instance.\n   * @param {function} callback - Continuation to respond to when complete.\n   * @retruns {mixed} - TODO: add return description.\n   */\n\n\n  query(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n    const results = {};\n    const queryObject = clone(options.query) || {}; // Helper function to query a single transport\n\n    function queryTransport(transport, next) {\n      if (options.query) {\n        options.query = transport.formatQuery(queryObject);\n      }\n\n      transport.query(options, (err, res) => {\n        if (err) {\n          return next(err);\n        }\n\n        next(null, transport.formatResults(res, options.format));\n      });\n    } // Helper function to accumulate the results from `queryTransport` into\n    // the `results`.\n\n\n    function addResults(transport, next) {\n      queryTransport(transport, (err, result) => {\n        // queryTransport could potentially invoke the callback multiple times\n        // since Transport code can be unpredictable.\n        if (next) {\n          result = err || result;\n\n          if (result) {\n            results[transport.name] = result;\n          } // eslint-disable-next-line callback-return\n\n\n          next();\n        }\n\n        next = null;\n      });\n    } // Iterate over the transports in parallel setting the appropriate key in\n    // the `results`.\n\n\n    asyncForEach(this.transports.filter(transport => !!transport.query), addResults, () => callback(null, results));\n  }\n  /**\n   * Returns a log stream for all transports. Options object is optional.\n   * @param{Object} options={} - Stream options for this instance.\n   * @returns {Stream} - TODO: add return description.\n   */\n\n\n  stream(options = {}) {\n    const out = new stream.Stream();\n    const streams = [];\n    out._streams = streams;\n\n    out.destroy = () => {\n      let i = streams.length;\n\n      while (i--) {\n        streams[i].destroy();\n      }\n    }; // Create a list of all transports for this instance.\n\n\n    this.transports.filter(transport => !!transport.stream).forEach(transport => {\n      const str = transport.stream(options);\n\n      if (!str) {\n        return;\n      }\n\n      streams.push(str);\n      str.on('log', log => {\n        log.transport = log.transport || [];\n        log.transport.push(transport.name);\n        out.emit('log', log);\n      });\n      str.on('error', err => {\n        err.transport = err.transport || [];\n        err.transport.push(transport.name);\n        out.emit('error', err);\n      });\n    });\n    return out;\n  }\n  /**\n   * Returns an object corresponding to a specific timing. When done is called\n   * the timer will finish and log the duration. e.g.:\n   * @returns {Profile} - TODO: add return description.\n   * @example\n   *    const timer = winston.startTimer()\n   *    setTimeout(() => {\n   *      timer.done({\n   *        message: 'Logging message'\n   *      });\n   *    }, 1000);\n   */\n\n\n  startTimer() {\n    return new Profiler(this);\n  }\n  /**\n   * Tracks the time inbetween subsequent calls to this method with the same\n   * `id` parameter. The second call to this method will log the difference in\n   * milliseconds along with the message.\n   * @param {string} id Unique id of the profiler\n   * @returns {Logger} - TODO: add return description.\n   */\n\n\n  profile(id, ...args) {\n    const time = Date.now();\n\n    if (this.profilers[id]) {\n      const timeEnd = this.profilers[id];\n      delete this.profilers[id]; // Attempt to be kind to users if they are still using older APIs.\n\n      if (typeof args[args.length - 2] === 'function') {\n        // eslint-disable-next-line no-console\n        console.warn('Callback function no longer supported as of winston@3.0.0');\n        args.pop();\n      } // Set the duration property of the metadata\n\n\n      const info = typeof args[args.length - 1] === 'object' ? args.pop() : {};\n      info.level = info.level || 'info';\n      info.durationMs = time - timeEnd;\n      info.message = info.message || id;\n      return this.write(info);\n    }\n\n    this.profilers[id] = time;\n    return this;\n  }\n  /**\n   * Backwards compatibility to `exceptions.handle` in winston < 3.0.0.\n   * @returns {undefined}\n   * @deprecated\n   */\n\n\n  handleExceptions(...args) {\n    // eslint-disable-next-line no-console\n    console.warn('Deprecated: .handleExceptions() will be removed in winston@4. Use .exceptions.handle()');\n    this.exceptions.handle(...args);\n  }\n  /**\n   * Backwards compatibility to `exceptions.handle` in winston < 3.0.0.\n   * @returns {undefined}\n   * @deprecated\n   */\n\n\n  unhandleExceptions(...args) {\n    // eslint-disable-next-line no-console\n    console.warn('Deprecated: .unhandleExceptions() will be removed in winston@4. Use .exceptions.unhandle()');\n    this.exceptions.unhandle(...args);\n  }\n  /**\n   * Throw a more meaningful deprecation notice\n   * @throws {Error} - TODO: add throws description.\n   */\n\n\n  cli() {\n    throw new Error(['Logger.cli() was removed in winston@3.0.0', 'Use a custom winston.formats.cli() instead.', 'See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md'].join('\\n'));\n  }\n  /**\n   * Bubbles the error, `err`, that occured on the specified `transport` up\n   * from this instance if `emitErrs` has been set.\n   * @param {Object} transport - Transport on which the error occured\n   * @throws {Error} - Error that occurred on the transport\n   * @private\n   */\n\n\n  _onError(transport) {\n    function transportError(err) {\n      this.emit('error', err, transport);\n    }\n\n    if (!transport.__winstonError) {\n      transport.__winstonError = transportError.bind(this);\n      transport.on('error', transport.__winstonError);\n    }\n  }\n\n}\n\nfunction getLevelValue(levels, level) {\n  const value = levels[level];\n\n  if (!value && value !== 0) {\n    return null;\n  }\n\n  return value;\n}\n/**\n * Represents the current readableState pipe targets for this Logger instance.\n * @type {Array|Object}\n */\n\n\nObject.defineProperty(Logger.prototype, 'transports', {\n  configurable: false,\n  enumerable: true,\n\n  get() {\n    const {\n      pipes\n    } = this._readableState;\n    return !Array.isArray(pipes) ? [pipes].filter(Boolean) : pipes;\n  }\n\n});\nmodule.exports = Logger;","map":{"version":3,"sources":["/Users/pro/Desktop/Projects/yesume/src/node_test/node_modules/winston/lib/winston/logger.js"],"names":["stream","require","asyncForEach","LEVEL","SPLAT","isStream","ExceptionHandler","LegacyTransportStream","Profiler","clone","warn","config","Logger","Transform","constructor","options","objectMode","configure","silent","format","levels","level","exitOnError","transports","colors","emitErrs","formatters","padLevels","rewriters","stripColors","exceptionHandlers","length","clear","npm","exceptions","profilers","Array","isArray","forEach","transport","add","Error","join","handle","isLevelEnabled","givenLevelValue","getLevelValue","configuredLevelValue","index","findIndex","transportLevelValue","log","msg","splat","arguments","write","message","meta","Object","assign","slice","_transform","info","enc","callback","console","error","_readableState","pipes","push","transform","ex","_final","next","finished","setImmediate","once","end","target","_writableState","_onError","pipe","handleExceptions","remove","filter","match","unpipe","close","emit","setLevels","deprecated","query","results","queryObject","queryTransport","formatQuery","err","res","formatResults","addResults","result","name","out","Stream","streams","_streams","destroy","i","str","on","startTimer","profile","id","args","time","Date","now","timeEnd","pop","durationMs","unhandleExceptions","unhandle","cli","transportError","__winstonError","bind","value","defineProperty","prototype","configurable","enumerable","get","Boolean","module","exports"],"mappings":"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","sourcesContent":["/**\n * logger.js: TODO: add file header description.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst stream = require('readable-stream');\nconst asyncForEach = require('async/forEach');\nconst { LEVEL, SPLAT } = require('triple-beam');\nconst isStream = require('is-stream');\nconst ExceptionHandler = require('./exception-handler');\nconst LegacyTransportStream = require('winston-transport/legacy');\nconst Profiler = require('./profiler');\nconst { clone, warn } = require('./common');\nconst config = require('./config');\n\n/**\n * TODO: add class description.\n * @type {Logger}\n * @extends {stream.Transform}\n */\nclass Logger extends stream.Transform {\n  /**\n   * Constructor function for the Logger object responsible for persisting log\n   * messages and metadata to one or more transports.\n   * @param {!Object} options - foo\n   */\n  constructor(options) {\n    super({\n      objectMode: true\n    });\n    this.configure(options);\n  }\n\n  /**\n   * This will wholesale reconfigure this instance by:\n   * 1. Resetting all transports. Older transports will be removed implicitly.\n   * 2. Set all other options including levels, colors, rewriters, filters,\n   *    exceptionHandlers, etc.\n   * @param {!Object} options - TODO: add param description.\n   * @returns {undefined}\n   */\n  configure({\n    silent,\n    format,\n    levels,\n    level = 'info',\n    exitOnError = true,\n    transports,\n    colors,\n    emitErrs,\n    formatters,\n    padLevels,\n    rewriters,\n    stripColors,\n    exceptionHandlers\n  } = {}) {\n    // Reset transports if we already have them\n    if (this.transports.length) {\n      this.clear();\n    }\n\n    this.silent = silent;\n    this.format = format || this.format || require('logform/json')();\n\n    // Hoist other options onto this instance.\n    this.levels = levels || this.levels || config.npm.levels;\n    this.level = level;\n    this.exceptions = new ExceptionHandler(this);\n    this.profilers = {};\n    this.exitOnError = exitOnError;\n\n    // Add all transports we have been provided.\n    if (transports) {\n      transports = Array.isArray(transports) ? transports : [transports];\n      transports.forEach(transport => this.add(transport));\n    }\n\n    if (\n      colors || emitErrs || formatters ||\n      padLevels || rewriters || stripColors\n    ) {\n      throw new Error([\n        '{ colors, emitErrs, formatters, padLevels, rewriters, stripColors } were removed in winston@3.0.0.',\n        'Use a custom winston.format(function) instead.',\n        'See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md'\n      ].join('\\n'));\n    }\n\n    if (exceptionHandlers) {\n      this.exceptions.handle(exceptionHandlers);\n    }\n  }\n\n  isLevelEnabled(level) {\n    const givenLevelValue = getLevelValue(this.levels, level);\n    if (givenLevelValue === null) {\n      return false;\n    }\n\n    const configuredLevelValue = getLevelValue(this.levels, this.level);\n    if (configuredLevelValue === null) {\n      return false;\n    }\n\n    if (!this.transports || this.transports.length === 0) {\n      return configuredLevelValue >= givenLevelValue;\n    }\n\n    const index = this.transports.findIndex(transport => {\n      let transportLevelValue = getLevelValue(this.levels, transport.level);\n      if (transportLevelValue === null) {\n        transportLevelValue = configuredLevelValue;\n      }\n      return transportLevelValue >= givenLevelValue;\n    });\n    return index !== -1;\n  }\n\n  /* eslint-disable valid-jsdoc */\n  /**\n   * Ensure backwards compatibility with a `log` method\n   * @param {mixed} level - Level the log message is written at.\n   * @param {mixed} msg - TODO: add param description.\n   * @param {mixed} meta - TODO: add param description.\n   * @returns {Logger} - TODO: add return description.\n   *\n   * @example\n   *    // Supports the existing API:\n   *    logger.log('info', 'Hello world', { custom: true });\n   *    logger.log('info', new Error('Yo, it\\'s on fire'));\n   *    logger.log('info', '%s %d%%', 'A string', 50, { thisIsMeta: true });\n   *\n   *    // And the new API with a single JSON literal:\n   *    logger.log({ level: 'info', message: 'Hello world', custom: true });\n   *    logger.log({ level: 'info', message: new Error('Yo, it\\'s on fire') });\n   *    logger.log({\n   *      level: 'info',\n   *      message: '%s %d%%',\n   *      [SPLAT]: ['A string', 50],\n   *      meta: { thisIsMeta: true }\n   *    });\n   *\n   */\n  /* eslint-enable valid-jsdoc */\n  log(level, msg, ...splat) { // eslint-disable-line max-params\n    // Optimize for the hotpath of logging JSON literals\n    if (arguments.length === 1) {\n      // Yo dawg, I heard you like levels ... seriously ...\n      // In this context the LHS `level` here is actually the `info` so read\n      // this as: info[LEVEL] = info.level;\n      level[LEVEL] = level.level;\n      this.write(level);\n      return this;\n    }\n\n    // Slightly less hotpath, but worth optimizing for.\n    if (arguments.length === 2) {\n      if (msg && typeof msg === 'object') {\n        msg[LEVEL] = msg.level = level;\n        this.write(msg);\n        return this;\n      }\n\n      this.write({ [LEVEL]: level, level, message: msg });\n      return this;\n    }\n\n    const [meta] = splat;\n    if (typeof meta === 'object' && meta !== null) {\n      this.write(Object.assign({}, meta, {\n        [LEVEL]: level,\n        [SPLAT]: splat.slice(0),\n        level,\n        message: msg\n      }));\n    } else {\n      this.write(Object.assign({}, {\n        [LEVEL]: level,\n        [SPLAT]: splat,\n        level,\n        message: msg\n      }));\n    }\n\n    return this;\n  }\n\n  /**\n   * Pushes data so that it can be picked up by all of our pipe targets.\n   * @param {mixed} info - TODO: add param description.\n   * @param {mixed} enc - TODO: add param description.\n   * @param {mixed} callback - Continues stream processing.\n   * @returns {undefined}\n   * @private\n   */\n  _transform(info, enc, callback) {\n    if (this.silent) {\n      return callback();\n    }\n\n    // [LEVEL] is only soft guaranteed to be set here since we are a proper\n    // stream. It is likely that `info` came in through `.log(info)` or\n    // `.info(info)`. If it is not defined, however, define it.\n    // This LEVEL symbol is provided by `triple-beam` and also used in:\n    // - logform\n    // - winston-transport\n    // - abstract-winston-transport\n    if (!info[LEVEL]) {\n      info[LEVEL] = info.level;\n    }\n\n    // Remark: really not sure what to do here, but this has been reported as\n    // very confusing by pre winston@2.0.0 users as quite confusing when using\n    // custom levels.\n    if (!this.levels[info[LEVEL]] && this.levels[info[LEVEL]] !== 0) {\n      // eslint-disable-next-line no-console\n      console.error('[winston] Unknown logger level: %s', info[LEVEL]);\n    }\n\n    // Remark: not sure if we should simply error here.\n    if (!this._readableState.pipes) {\n      // eslint-disable-next-line no-console\n      console.error('[winston] Attempt to write logs with no transports %j', info);\n    }\n\n    // Here we write to the `format` pipe-chain, which on `readable` above will\n    // push the formatted `info` Object onto the buffer for this instance. We trap\n    // (and re-throw) any errors generated by the user-provided format, but also\n    // guarantee that the streams callback is invoked so that we can continue flowing.\n    try {\n      this.push(this.format.transform(info, this.format.options));\n    } catch (ex) {\n      throw ex;\n    } finally {\n      // eslint-disable-next-line callback-return\n      callback();\n    }\n  }\n\n  /**\n   * Delays the 'finish' event until all transport pipe targets have\n   * also emitted 'finish' or are already finished.\n   * @param {mixed} callback - Continues stream processing.\n   */\n  _final(callback) {\n    const transports = this.transports.slice();\n    asyncForEach(transports, (transport, next) => {\n      if (!transport || transport.finished) return setImmediate(next);\n      transport.once('finish', next);\n      transport.end();\n    }, callback);\n  }\n\n  /**\n   * Adds the transport to this logger instance by piping to it.\n   * @param {mixed} transport - TODO: add param description.\n   * @returns {Logger} - TODO: add return description.\n   */\n  add(transport) {\n    // Support backwards compatibility with all existing `winston < 3.x.x`\n    // transports which meet one of two criteria:\n    // 1. They inherit from winston.Transport in  < 3.x.x which is NOT a stream.\n    // 2. They expose a log method which has a length greater than 2 (i.e. more then\n    //    just `log(info, callback)`.\n    const target = !isStream(transport) || transport.log.length > 2\n      ? new LegacyTransportStream({ transport })\n      : transport;\n\n    if (!target._writableState || !target._writableState.objectMode) {\n      throw new Error('Transports must WritableStreams in objectMode. Set { objectMode: true }.');\n    }\n\n    // Listen for the `error` event on the new Transport.\n    this._onError(target);\n    this.pipe(target);\n\n    if (transport.handleExceptions) {\n      this.exceptions.handle();\n    }\n\n    return this;\n  }\n\n  /**\n   * Removes the transport from this logger instance by unpiping from it.\n   * @param {mixed} transport - TODO: add param description.\n   * @returns {Logger} - TODO: add return description.\n   */\n  remove(transport) {\n    let target = transport;\n    if (!isStream(transport) || transport.log.length > 2) {\n      target = this.transports\n        .filter(match => match.transport === transport)[0];\n    }\n\n    if (target) { this.unpipe(target); }\n    return this;\n  }\n\n  /**\n   * Removes all transports from this logger instance.\n   * @returns {Logger} - TODO: add return description.\n   */\n  clear() {\n    this.unpipe();\n    return this;\n  }\n\n  /**\n   * Cleans up resources (streams, event listeners) for all transports\n   * associated with this instance (if necessary).\n   * @returns {Logger} - TODO: add return description.\n   */\n  close() {\n    this.clear();\n    this.emit('close');\n    return this;\n  }\n\n  /**\n   * Sets the `target` levels specified on this instance.\n   * @param {Object} Target levels to use on this instance.\n   */\n  setLevels() {\n    warn.deprecated('setLevels');\n  }\n\n  /**\n   * Queries the all transports for this instance with the specified `options`.\n   * This will aggregate each transport's results into one object containing\n   * a property per transport.\n   * @param {Object} options - Query options for this instance.\n   * @param {function} callback - Continuation to respond to when complete.\n   * @retruns {mixed} - TODO: add return description.\n   */\n  query(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    options = options || {};\n    const results = {};\n    const queryObject = clone(options.query) || {};\n\n    // Helper function to query a single transport\n    function queryTransport(transport, next) {\n      if (options.query) {\n        options.query = transport.formatQuery(queryObject);\n      }\n\n      transport.query(options, (err, res) => {\n        if (err) {\n          return next(err);\n        }\n\n        next(null, transport.formatResults(res, options.format));\n      });\n    }\n\n    // Helper function to accumulate the results from `queryTransport` into\n    // the `results`.\n    function addResults(transport, next) {\n      queryTransport(transport, (err, result) => {\n        // queryTransport could potentially invoke the callback multiple times\n        // since Transport code can be unpredictable.\n        if (next) {\n          result = err || result;\n          if (result) {\n            results[transport.name] = result;\n          }\n\n          // eslint-disable-next-line callback-return\n          next();\n        }\n\n        next = null;\n      });\n    }\n\n    // Iterate over the transports in parallel setting the appropriate key in\n    // the `results`.\n    asyncForEach(\n      this.transports.filter(transport => !!transport.query),\n      addResults,\n      () => callback(null, results)\n    );\n  }\n\n  /**\n   * Returns a log stream for all transports. Options object is optional.\n   * @param{Object} options={} - Stream options for this instance.\n   * @returns {Stream} - TODO: add return description.\n   */\n  stream(options = {}) {\n    const out = new stream.Stream();\n    const streams = [];\n\n    out._streams = streams;\n    out.destroy = () => {\n      let i = streams.length;\n      while (i--) {\n        streams[i].destroy();\n      }\n    };\n\n    // Create a list of all transports for this instance.\n    this.transports\n      .filter(transport => !!transport.stream)\n      .forEach(transport => {\n        const str = transport.stream(options);\n        if (!str) {\n          return;\n        }\n\n        streams.push(str);\n\n        str.on('log', log => {\n          log.transport = log.transport || [];\n          log.transport.push(transport.name);\n          out.emit('log', log);\n        });\n\n        str.on('error', err => {\n          err.transport = err.transport || [];\n          err.transport.push(transport.name);\n          out.emit('error', err);\n        });\n      });\n\n    return out;\n  }\n\n  /**\n   * Returns an object corresponding to a specific timing. When done is called\n   * the timer will finish and log the duration. e.g.:\n   * @returns {Profile} - TODO: add return description.\n   * @example\n   *    const timer = winston.startTimer()\n   *    setTimeout(() => {\n   *      timer.done({\n   *        message: 'Logging message'\n   *      });\n   *    }, 1000);\n   */\n  startTimer() {\n    return new Profiler(this);\n  }\n\n  /**\n   * Tracks the time inbetween subsequent calls to this method with the same\n   * `id` parameter. The second call to this method will log the difference in\n   * milliseconds along with the message.\n   * @param {string} id Unique id of the profiler\n   * @returns {Logger} - TODO: add return description.\n   */\n  profile(id, ...args) {\n    const time = Date.now();\n    if (this.profilers[id]) {\n      const timeEnd = this.profilers[id];\n      delete this.profilers[id];\n\n      // Attempt to be kind to users if they are still using older APIs.\n      if (typeof args[args.length - 2] === 'function') {\n        // eslint-disable-next-line no-console\n        console.warn('Callback function no longer supported as of winston@3.0.0');\n        args.pop();\n      }\n\n      // Set the duration property of the metadata\n      const info = typeof args[args.length - 1] === 'object' ? args.pop() : {};\n      info.level = info.level || 'info';\n      info.durationMs = time - timeEnd;\n      info.message = info.message || id;\n      return this.write(info);\n    }\n\n    this.profilers[id] = time;\n    return this;\n  }\n\n  /**\n   * Backwards compatibility to `exceptions.handle` in winston < 3.0.0.\n   * @returns {undefined}\n   * @deprecated\n   */\n  handleExceptions(...args) {\n    // eslint-disable-next-line no-console\n    console.warn('Deprecated: .handleExceptions() will be removed in winston@4. Use .exceptions.handle()');\n    this.exceptions.handle(...args);\n  }\n\n  /**\n   * Backwards compatibility to `exceptions.handle` in winston < 3.0.0.\n   * @returns {undefined}\n   * @deprecated\n   */\n  unhandleExceptions(...args) {\n    // eslint-disable-next-line no-console\n    console.warn('Deprecated: .unhandleExceptions() will be removed in winston@4. Use .exceptions.unhandle()');\n    this.exceptions.unhandle(...args);\n  }\n\n  /**\n   * Throw a more meaningful deprecation notice\n   * @throws {Error} - TODO: add throws description.\n   */\n  cli() {\n    throw new Error([\n      'Logger.cli() was removed in winston@3.0.0',\n      'Use a custom winston.formats.cli() instead.',\n      'See: https://github.com/winstonjs/winston/tree/master/UPGRADE-3.0.md'\n    ].join('\\n'));\n  }\n\n  /**\n   * Bubbles the error, `err`, that occured on the specified `transport` up\n   * from this instance if `emitErrs` has been set.\n   * @param {Object} transport - Transport on which the error occured\n   * @throws {Error} - Error that occurred on the transport\n   * @private\n   */\n  _onError(transport) {\n    function transportError(err) {\n      this.emit('error', err, transport);\n    }\n\n    if (!transport.__winstonError) {\n      transport.__winstonError = transportError.bind(this);\n      transport.on('error', transport.__winstonError);\n    }\n  }\n}\n\nfunction getLevelValue(levels, level) {\n  const value = levels[level];\n  if (!value && value !== 0) {\n    return null;\n  }\n  return value;\n}\n\n/**\n * Represents the current readableState pipe targets for this Logger instance.\n * @type {Array|Object}\n */\nObject.defineProperty(Logger.prototype, 'transports', {\n  configurable: false,\n  enumerable: true,\n  get() {\n    const { pipes } = this._readableState;\n    return !Array.isArray(pipes) ? [pipes].filter(Boolean) : pipes;\n  }\n});\n\nmodule.exports = Logger;\n"]},"metadata":{},"sourceType":"module"}