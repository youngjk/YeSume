{"ast":null,"code":"const scrapSelectorFields = (selector, section) => async (scrapedObjectPromise, fieldKey) => {\n  const scrapedObject = await scrapedObjectPromise;\n  const field = section.fields[fieldKey]; // currently field can be a selector string, or an object containing a selector field\n\n  const fieldSelectorString = (await field.selector) ? field.selector : field;\n  const isFieldPresent = await selector.$(fieldSelectorString);\n\n  if (!isFieldPresent) {\n    return scrapedObject;\n  }\n\n  if (field.isMultipleFields) {\n    if (field.attribute === 'href') {\n      scrapedObject[fieldKey] = await selector.$$eval(fieldSelectorString, elems => elems.map(elem => elem.href ? elem.href.trim() : elem.innerHTML.trim()));\n    } else if (field.attribute === 'src') {\n      scrapedObject[fieldKey] = await selector.$$eval(fieldSelectorString, elems => elems.map(elem => elem.src ? elem.src.trim() : elem.innerHTML.trim()));\n    } else {\n      scrapedObject[fieldKey] = await selector.$$eval(fieldSelectorString, elems => elems.map(elem => elem.innerText.trim()));\n    }\n  } else if (field.hasChildrenFields) {\n    const fieldChildrenSelectors = await selector.$$(field.selector);\n    scrapedObject[fieldKey] = await Promise.all(fieldChildrenSelectors.map(s => scrapSelector(s, field)));\n  } else if (field.attribute && field.attribute === 'href') {\n    scrapedObject[fieldKey] = await selector.$eval(fieldSelectorString, elem => elem && elem.href ? elem.href.trim() : '');\n  } else if (field.attribute && field.attribute === 'src') {\n    scrapedObject[fieldKey] = await selector.$eval(fieldSelectorString, elem => elem && elem.src ? elem.src.trim() : '');\n  } else {\n    scrapedObject[fieldKey] = await selector.$eval(fieldSelectorString, elem => elem && elem.innerText ? elem.innerText.trim() : '');\n  }\n\n  return scrapedObject;\n};\n\nconst scrapSelector = (selector, section) => Object.keys(section.fields).reduce(scrapSelectorFields(selector, section), Promise.resolve({}));\n\nmodule.exports = async (page, section) => {\n  const sectionSelectors = await page.$$(section.selector);\n  const scrapedPromises = sectionSelectors.map(selector => scrapSelector(selector, section));\n  return Promise.all(scrapedPromises);\n};","map":{"version":3,"sources":["/Users/pro/Desktop/Projects/yesume/node_modules/scrapedin/src/scrapSection.js"],"names":["scrapSelectorFields","selector","section","scrapedObjectPromise","fieldKey","scrapedObject","field","fields","fieldSelectorString","isFieldPresent","$","isMultipleFields","attribute","$$eval","elems","map","elem","href","trim","innerHTML","src","innerText","hasChildrenFields","fieldChildrenSelectors","$$","Promise","all","s","scrapSelector","$eval","Object","keys","reduce","resolve","module","exports","page","sectionSelectors","scrapedPromises"],"mappings":"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","sourcesContent":["const scrapSelectorFields = (selector, section) => async (scrapedObjectPromise, fieldKey) => {\n  const scrapedObject = await scrapedObjectPromise\n  const field = section.fields[fieldKey]\n\n  // currently field can be a selector string, or an object containing a selector field\n  const fieldSelectorString = await field.selector\n    ? field.selector\n    : field\n\n  const isFieldPresent = await selector.$(fieldSelectorString)\n\n  if (!isFieldPresent) { return scrapedObject }\n\n  if (field.isMultipleFields) {\n    if (field.attribute === 'href') {\n      scrapedObject[fieldKey] = await selector.$$eval(fieldSelectorString, (elems) => elems.map(elem => elem.href ? elem.href.trim() : elem.innerHTML.trim()))\n    } else if(field.attribute === 'src'){\n      scrapedObject[fieldKey] = await selector.$$eval(fieldSelectorString, (elems) => elems.map(elem => elem.src ? elem.src.trim() : elem.innerHTML.trim()))\n    }else{\n      scrapedObject[fieldKey] = await selector.$$eval(fieldSelectorString, (elems) => elems.map(elem => elem.innerText.trim()))\n    }\n  } else if (field.hasChildrenFields) {\n    const fieldChildrenSelectors = await selector.$$(field.selector)\n\n    scrapedObject[fieldKey] = await Promise.all(\n      fieldChildrenSelectors.map((s) => scrapSelector(s, field))\n    )\n  } else if (field.attribute && field.attribute === 'href') {\n    scrapedObject[fieldKey] = await selector.$eval(fieldSelectorString, (elem) => elem && elem.href ? elem.href.trim() : '')\n  } else if (field.attribute && field.attribute === 'src') {\n    scrapedObject[fieldKey] = await selector.$eval(fieldSelectorString, (elem) => elem && elem.src ? elem.src.trim() : '')\n  } else {\n    scrapedObject[fieldKey] = await selector.$eval(fieldSelectorString, (elem) => elem && elem.innerText ? elem.innerText.trim() : '')\n  }\n\n  return scrapedObject\n}\nconst scrapSelector = (selector, section) =>\n  Object.keys(section.fields)\n    .reduce(scrapSelectorFields(selector, section), Promise.resolve({}))\n\nmodule.exports = async (page, section) => {\n  const sectionSelectors = await page.$$(section.selector)\n\n  const scrapedPromises = sectionSelectors\n    .map((selector) => scrapSelector(selector, section))\n\n  return Promise.all(scrapedPromises)\n}\n"]},"metadata":{},"sourceType":"script"}