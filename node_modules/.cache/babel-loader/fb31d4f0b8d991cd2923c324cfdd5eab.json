{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nvar _require = require('./colorize'),\n    Colorizer = _require.Colorizer;\n\nvar _require2 = require('./pad-levels'),\n    Padder = _require2.Padder;\n\nvar _require3 = require('triple-beam'),\n    configs = _require3.configs,\n    MESSAGE = _require3.MESSAGE;\n/**\n * Cli format class that handles initial state for a a separate\n * Colorizer and Padder instance.\n */\n\n\nvar CliFormat = function () {\n  function CliFormat() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, CliFormat);\n\n    if (!opts.levels) {\n      opts.levels = configs.npm.levels;\n    }\n\n    this.colorizer = new Colorizer(opts);\n    this.padder = new Padder(opts);\n    this.options = opts;\n  }\n  /*\n   * function transform (info, opts)\n   * Attempts to both:\n   * 1. Pad the { level }\n   * 2. Colorize the { level, message }\n   * of the given `logform` info object depending on the `opts`.\n   */\n\n\n  _createClass(CliFormat, [{\n    key: 'transform',\n    value: function transform(info, opts) {\n      this.colorizer.transform(this.padder.transform(info, opts), opts);\n      info[MESSAGE] = info.level + ':' + info.message;\n      return info;\n    }\n  }]);\n\n  return CliFormat;\n}();\n/*\n * function cli (opts)\n * Returns a new instance of the CLI format that turns a log\n * `info` object into the same format previously available\n * in `winston.cli()` in `winston < 3.0.0`.\n */\n\n\nmodule.exports = function (opts) {\n  return new CliFormat(opts);\n}; //\n// Attach the CliFormat for registration purposes\n//\n\n\nmodule.exports.Format = CliFormat;","map":{"version":3,"sources":["/Users/pro/Desktop/Projects/yesume/node_modules/logform/dist/cli.js"],"names":["_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","_classCallCheck","instance","TypeError","_require","require","Colorizer","_require2","Padder","_require3","configs","MESSAGE","CliFormat","opts","arguments","undefined","levels","npm","colorizer","padder","options","value","transform","info","level","message","module","exports","Format"],"mappings":"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","sourcesContent":["'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar _require = require('./colorize'),\n    Colorizer = _require.Colorizer;\n\nvar _require2 = require('./pad-levels'),\n    Padder = _require2.Padder;\n\nvar _require3 = require('triple-beam'),\n    configs = _require3.configs,\n    MESSAGE = _require3.MESSAGE;\n\n/**\n * Cli format class that handles initial state for a a separate\n * Colorizer and Padder instance.\n */\n\n\nvar CliFormat = function () {\n  function CliFormat() {\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, CliFormat);\n\n    if (!opts.levels) {\n      opts.levels = configs.npm.levels;\n    }\n\n    this.colorizer = new Colorizer(opts);\n    this.padder = new Padder(opts);\n    this.options = opts;\n  }\n\n  /*\n   * function transform (info, opts)\n   * Attempts to both:\n   * 1. Pad the { level }\n   * 2. Colorize the { level, message }\n   * of the given `logform` info object depending on the `opts`.\n   */\n\n\n  _createClass(CliFormat, [{\n    key: 'transform',\n    value: function transform(info, opts) {\n      this.colorizer.transform(this.padder.transform(info, opts), opts);\n\n      info[MESSAGE] = info.level + ':' + info.message;\n      return info;\n    }\n  }]);\n\n  return CliFormat;\n}();\n\n/*\n * function cli (opts)\n * Returns a new instance of the CLI format that turns a log\n * `info` object into the same format previously available\n * in `winston.cli()` in `winston < 3.0.0`.\n */\n\n\nmodule.exports = function (opts) {\n  return new CliFormat(opts);\n};\n\n//\n// Attach the CliFormat for registration purposes\n//\nmodule.exports.Format = CliFormat;"]},"metadata":{},"sourceType":"script"}