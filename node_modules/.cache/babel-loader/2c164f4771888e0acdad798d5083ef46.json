{"ast":null,"code":"/**\n * http.js: Transport for outputting to a json-rpcserver.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n'use strict';\n\nconst http = require('http');\n\nconst https = require('https');\n\nconst {\n  Stream\n} = require('readable-stream');\n\nconst TransportStream = require('winston-transport');\n/**\n * Transport for outputting to a json-rpc server.\n * @type {Stream}\n * @extends {TransportStream}\n */\n\n\nmodule.exports = class Http extends TransportStream {\n  /**\n   * Constructor function for the Http transport object responsible for\n   * persisting log messages and metadata to a terminal or TTY.\n   * @param {!Object} [options={}] - Options for this instance.\n   */\n  constructor(options = {}) {\n    super(options);\n    this.name = options.name || 'http';\n    this.ssl = !!options.ssl;\n    this.host = options.host || 'localhost';\n    this.port = options.port;\n    this.auth = options.auth;\n    this.path = options.path || '';\n    this.agent = options.agent;\n    this.headers = options.headers || {};\n    this.headers['content-type'] = 'application/json';\n\n    if (!this.port) {\n      this.port = this.ssl ? 443 : 80;\n    }\n  }\n  /**\n   * Core logging method exposed to Winston.\n   * @param {Object} info - TODO: add param description.\n   * @param {function} callback - TODO: add param description.\n   * @returns {undefined}\n   */\n\n\n  log(info, callback) {\n    this._request(info, (err, res) => {\n      if (res && res.statusCode !== 200) {\n        err = new Error(`Invalid HTTP Status Code: ${res.statusCode}`);\n      }\n\n      if (err) {\n        this.emit('warn', err);\n      } else {\n        this.emit('logged', info);\n      }\n    }); // Remark: (jcrugzz) Fire and forget here so requests dont cause buffering\n    // and block more requests from happening?\n\n\n    if (callback) {\n      setImmediate(callback);\n    }\n  }\n  /**\n   * Query the transport. Options object is optional.\n   * @param {Object} options -  Loggly-like query options for this instance.\n   * @param {function} callback - Continuation to respond to when complete.\n   * @returns {undefined}\n   */\n\n\n  query(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    options = {\n      method: 'query',\n      params: this.normalizeQuery(options)\n    };\n\n    if (options.params.path) {\n      options.path = options.params.path;\n      delete options.params.path;\n    }\n\n    if (options.params.auth) {\n      options.auth = options.params.auth;\n      delete options.params.auth;\n    }\n\n    this._request(options, (err, res, body) => {\n      if (res && res.statusCode !== 200) {\n        err = new Error(`Invalid HTTP Status Code: ${res.statusCode}`);\n      }\n\n      if (err) {\n        return callback(err);\n      }\n\n      if (typeof body === 'string') {\n        try {\n          body = JSON.parse(body);\n        } catch (e) {\n          return callback(e);\n        }\n      }\n\n      callback(null, body);\n    });\n  }\n  /**\n   * Returns a log stream for this transport. Options object is optional.\n   * @param {Object} options - Stream options for this instance.\n   * @returns {Stream} - TODO: add return description\n   */\n\n\n  stream(options = {}) {\n    const stream = new Stream();\n    options = {\n      method: 'stream',\n      params: options\n    };\n\n    if (options.params.path) {\n      options.path = options.params.path;\n      delete options.params.path;\n    }\n\n    if (options.params.auth) {\n      options.auth = options.params.auth;\n      delete options.params.auth;\n    }\n\n    let buff = '';\n\n    const req = this._request(options);\n\n    stream.destroy = () => req.destroy();\n\n    req.on('data', data => {\n      data = (buff + data).split(/\\n+/);\n      const l = data.length - 1;\n      let i = 0;\n\n      for (; i < l; i++) {\n        try {\n          stream.emit('log', JSON.parse(data[i]));\n        } catch (e) {\n          stream.emit('error', e);\n        }\n      }\n\n      buff = data[l];\n    });\n    req.on('error', err => stream.emit('error', err));\n    return stream;\n  }\n  /**\n   * Make a request to a winstond server or any http server which can\n   * handle json-rpc.\n   * @param {function} options - Options to sent the request.\n   * @param {function} callback - Continuation to respond to when complete.\n   */\n\n\n  _request(options, callback) {\n    options = options || {};\n    const auth = options.auth || this.auth;\n    const path = options.path || this.path || '';\n    delete options.auth;\n    delete options.path; // Prepare options for outgoing HTTP request\n\n    const req = (this.ssl ? https : http).request({\n      method: 'POST',\n      host: this.host,\n      port: this.port,\n      path: `/${path.replace(/^\\//, '')}`,\n      headers: this.headers,\n      auth: auth ? `${auth.username}:${auth.password}` : '',\n      agent: this.agent\n    });\n    req.on('error', callback);\n    req.on('response', res => res.on('end', () => callback(null, res)).resume());\n    req.end(Buffer.from(JSON.stringify(options), 'utf8'));\n  }\n\n};","map":{"version":3,"sources":["/Users/pro/Desktop/Projects/yesume/node_modules/winston/lib/winston/transports/http.js"],"names":["http","require","https","Stream","TransportStream","module","exports","Http","constructor","options","name","ssl","host","port","auth","path","agent","headers","log","info","callback","_request","err","res","statusCode","Error","emit","setImmediate","query","method","params","normalizeQuery","body","JSON","parse","e","stream","buff","req","destroy","on","data","split","l","length","i","request","replace","username","password","resume","end","Buffer","from","stringify"],"mappings":"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","sourcesContent":["/**\n * http.js: Transport for outputting to a json-rpcserver.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst http = require('http');\nconst https = require('https');\nconst { Stream } = require('readable-stream');\nconst TransportStream = require('winston-transport');\n\n/**\n * Transport for outputting to a json-rpc server.\n * @type {Stream}\n * @extends {TransportStream}\n */\nmodule.exports = class Http extends TransportStream {\n  /**\n   * Constructor function for the Http transport object responsible for\n   * persisting log messages and metadata to a terminal or TTY.\n   * @param {!Object} [options={}] - Options for this instance.\n   */\n  constructor(options = {}) {\n    super(options);\n\n    this.name = options.name || 'http';\n    this.ssl = !!options.ssl;\n    this.host = options.host || 'localhost';\n    this.port = options.port;\n    this.auth = options.auth;\n    this.path = options.path || '';\n    this.agent = options.agent;\n    this.headers = options.headers || {};\n    this.headers['content-type'] = 'application/json';\n\n    if (!this.port) {\n      this.port = this.ssl ? 443 : 80;\n    }\n  }\n\n  /**\n   * Core logging method exposed to Winston.\n   * @param {Object} info - TODO: add param description.\n   * @param {function} callback - TODO: add param description.\n   * @returns {undefined}\n   */\n  log(info, callback) {\n    this._request(info, (err, res) => {\n      if (res && res.statusCode !== 200) {\n        err = new Error(`Invalid HTTP Status Code: ${res.statusCode}`);\n      }\n\n      if (err) {\n        this.emit('warn', err);\n      } else {\n        this.emit('logged', info);\n      }\n    });\n\n    // Remark: (jcrugzz) Fire and forget here so requests dont cause buffering\n    // and block more requests from happening?\n    if (callback) {\n      setImmediate(callback);\n    }\n  }\n\n  /**\n   * Query the transport. Options object is optional.\n   * @param {Object} options -  Loggly-like query options for this instance.\n   * @param {function} callback - Continuation to respond to when complete.\n   * @returns {undefined}\n   */\n  query(options, callback) {\n    if (typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    options = {\n      method: 'query',\n      params: this.normalizeQuery(options)\n    };\n\n    if (options.params.path) {\n      options.path = options.params.path;\n      delete options.params.path;\n    }\n\n    if (options.params.auth) {\n      options.auth = options.params.auth;\n      delete options.params.auth;\n    }\n\n    this._request(options, (err, res, body) => {\n      if (res && res.statusCode !== 200) {\n        err = new Error(`Invalid HTTP Status Code: ${res.statusCode}`);\n      }\n\n      if (err) {\n        return callback(err);\n      }\n\n      if (typeof body === 'string') {\n        try {\n          body = JSON.parse(body);\n        } catch (e) {\n          return callback(e);\n        }\n      }\n\n      callback(null, body);\n    });\n  }\n\n  /**\n   * Returns a log stream for this transport. Options object is optional.\n   * @param {Object} options - Stream options for this instance.\n   * @returns {Stream} - TODO: add return description\n   */\n  stream(options = {}) {\n    const stream = new Stream();\n    options = {\n      method: 'stream',\n      params: options\n    };\n\n    if (options.params.path) {\n      options.path = options.params.path;\n      delete options.params.path;\n    }\n\n    if (options.params.auth) {\n      options.auth = options.params.auth;\n      delete options.params.auth;\n    }\n\n    let buff = '';\n    const req = this._request(options);\n\n    stream.destroy = () => req.destroy();\n    req.on('data', data => {\n      data = (buff + data).split(/\\n+/);\n      const l = data.length - 1;\n\n      let i = 0;\n      for (; i < l; i++) {\n        try {\n          stream.emit('log', JSON.parse(data[i]));\n        } catch (e) {\n          stream.emit('error', e);\n        }\n      }\n\n      buff = data[l];\n    });\n    req.on('error', err => stream.emit('error', err));\n\n    return stream;\n  }\n\n  /**\n   * Make a request to a winstond server or any http server which can\n   * handle json-rpc.\n   * @param {function} options - Options to sent the request.\n   * @param {function} callback - Continuation to respond to when complete.\n   */\n  _request(options, callback) {\n    options = options || {};\n\n    const auth = options.auth || this.auth;\n    const path = options.path || this.path || '';\n\n    delete options.auth;\n    delete options.path;\n\n    // Prepare options for outgoing HTTP request\n    const req = (this.ssl ? https : http).request({\n      method: 'POST',\n      host: this.host,\n      port: this.port,\n      path: `/${path.replace(/^\\//, '')}`,\n      headers: this.headers,\n      auth: auth ? (`${auth.username}:${auth.password}`) : '',\n      agent: this.agent\n    });\n\n    req.on('error', callback);\n    req.on('response', res => (\n      res.on('end', () => callback(null, res)).resume()\n    ));\n    req.end(Buffer.from(JSON.stringify(options), 'utf8'));\n  }\n};\n"]},"metadata":{},"sourceType":"script"}