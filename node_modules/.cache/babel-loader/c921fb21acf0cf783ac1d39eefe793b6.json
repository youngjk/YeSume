{"ast":null,"code":"/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst {\n  assert\n} = require('./helper');\n\nconst keyDefinitions = require('./USKeyboardLayout');\n/**\n * @typedef {Object} KeyDescription\n * @property {number} keyCode\n * @property {string} key\n * @property {string} text\n * @property {string} code\n * @property {number} location\n */\n\n\nclass Keyboard {\n  /**\n   * @param {!Puppeteer.CDPSession} client\n   */\n  constructor(client) {\n    this._client = client;\n    this._modifiers = 0;\n    this._pressedKeys = new Set();\n  }\n  /**\n   * @param {string} key\n   * @param {{text?: string}=} options\n   */\n\n\n  async down(key, options = {\n    text: undefined\n  }) {\n    const description = this._keyDescriptionForString(key);\n\n    const autoRepeat = this._pressedKeys.has(description.code);\n\n    this._pressedKeys.add(description.code);\n\n    this._modifiers |= this._modifierBit(description.key);\n    const text = options.text === undefined ? description.text : options.text;\n    await this._client.send('Input.dispatchKeyEvent', {\n      type: text ? 'keyDown' : 'rawKeyDown',\n      modifiers: this._modifiers,\n      windowsVirtualKeyCode: description.keyCode,\n      code: description.code,\n      key: description.key,\n      text: text,\n      unmodifiedText: text,\n      autoRepeat,\n      location: description.location,\n      isKeypad: description.location === 3\n    });\n  }\n  /**\n   * @param {string} key\n   * @return {number}\n   */\n\n\n  _modifierBit(key) {\n    if (key === 'Alt') return 1;\n    if (key === 'Control') return 2;\n    if (key === 'Meta') return 4;\n    if (key === 'Shift') return 8;\n    return 0;\n  }\n  /**\n   * @param {string} keyString\n   * @return {KeyDescription}\n   */\n\n\n  _keyDescriptionForString(keyString) {\n    const shift = this._modifiers & 8;\n    const description = {\n      key: '',\n      keyCode: 0,\n      code: '',\n      text: '',\n      location: 0\n    };\n    const definition = keyDefinitions[keyString];\n    assert(definition, `Unknown key: \"${keyString}\"`);\n    if (definition.key) description.key = definition.key;\n    if (shift && definition.shiftKey) description.key = definition.shiftKey;\n    if (definition.keyCode) description.keyCode = definition.keyCode;\n    if (shift && definition.shiftKeyCode) description.keyCode = definition.shiftKeyCode;\n    if (definition.code) description.code = definition.code;\n    if (definition.location) description.location = definition.location;\n    if (description.key.length === 1) description.text = description.key;\n    if (definition.text) description.text = definition.text;\n    if (shift && definition.shiftText) description.text = definition.shiftText; // if any modifiers besides shift are pressed, no text should be sent\n\n    if (this._modifiers & ~8) description.text = '';\n    return description;\n  }\n  /**\n   * @param {string} key\n   */\n\n\n  async up(key) {\n    const description = this._keyDescriptionForString(key);\n\n    this._modifiers &= ~this._modifierBit(description.key);\n\n    this._pressedKeys.delete(description.code);\n\n    await this._client.send('Input.dispatchKeyEvent', {\n      type: 'keyUp',\n      modifiers: this._modifiers,\n      key: description.key,\n      windowsVirtualKeyCode: description.keyCode,\n      code: description.code,\n      location: description.location\n    });\n  }\n  /**\n   * @param {string} char\n   */\n\n\n  async sendCharacter(char) {\n    await this._client.send('Input.insertText', {\n      text: char\n    });\n  }\n  /**\n   * @param {string} text\n   * @param {{delay: (number|undefined)}=} options\n   */\n\n\n  async type(text, options) {\n    let delay = 0;\n    if (options && options.delay) delay = options.delay;\n\n    for (const char of text) {\n      if (keyDefinitions[char]) await this.press(char, {\n        delay\n      });else await this.sendCharacter(char);\n      if (delay) await new Promise(f => setTimeout(f, delay));\n    }\n  }\n  /**\n   * @param {string} key\n   * @param {!{delay?: number, text?: string}=} options\n   */\n\n\n  async press(key, options = {}) {\n    const {\n      delay = null\n    } = options;\n    await this.down(key, options);\n    if (delay !== null) await new Promise(f => setTimeout(f, options.delay));\n    await this.up(key);\n  }\n\n}\n\nclass Mouse {\n  /**\n   * @param {Puppeteer.CDPSession} client\n   * @param {!Keyboard} keyboard\n   */\n  constructor(client, keyboard) {\n    this._client = client;\n    this._keyboard = keyboard;\n    this._x = 0;\n    this._y = 0;\n    /** @type {'none'|'left'|'right'|'middle'} */\n\n    this._button = 'none';\n  }\n  /**\n   * @param {number} x\n   * @param {number} y\n   * @param {!{steps?: number}=} options\n   */\n\n\n  async move(x, y, options = {}) {\n    const {\n      steps = 1\n    } = options;\n    const fromX = this._x,\n          fromY = this._y;\n    this._x = x;\n    this._y = y;\n\n    for (let i = 1; i <= steps; i++) {\n      await this._client.send('Input.dispatchMouseEvent', {\n        type: 'mouseMoved',\n        button: this._button,\n        x: fromX + (this._x - fromX) * (i / steps),\n        y: fromY + (this._y - fromY) * (i / steps),\n        modifiers: this._keyboard._modifiers\n      });\n    }\n  }\n  /**\n   * @param {number} x\n   * @param {number} y\n   * @param {!{delay?: number, button?: \"left\"|\"right\"|\"middle\", clickCount?: number}=} options\n   */\n\n\n  async click(x, y, options = {}) {\n    const {\n      delay = null\n    } = options;\n    this.move(x, y);\n    this.down(options);\n    if (delay !== null) await new Promise(f => setTimeout(f, delay));\n    await this.up(options);\n  }\n  /**\n   * @param {!{button?: \"left\"|\"right\"|\"middle\", clickCount?: number}=} options\n   */\n\n\n  async down(options = {}) {\n    const {\n      button = 'left',\n      clickCount = 1\n    } = options;\n    this._button = button;\n    await this._client.send('Input.dispatchMouseEvent', {\n      type: 'mousePressed',\n      button,\n      x: this._x,\n      y: this._y,\n      modifiers: this._keyboard._modifiers,\n      clickCount\n    });\n  }\n  /**\n   * @param {!{button?: \"left\"|\"right\"|\"middle\", clickCount?: number}=} options\n   */\n\n\n  async up(options = {}) {\n    const {\n      button = 'left',\n      clickCount = 1\n    } = options;\n    this._button = 'none';\n    await this._client.send('Input.dispatchMouseEvent', {\n      type: 'mouseReleased',\n      button,\n      x: this._x,\n      y: this._y,\n      modifiers: this._keyboard._modifiers,\n      clickCount\n    });\n  }\n\n}\n\nclass Touchscreen {\n  /**\n   * @param {Puppeteer.CDPSession} client\n   * @param {Keyboard} keyboard\n   */\n  constructor(client, keyboard) {\n    this._client = client;\n    this._keyboard = keyboard;\n  }\n  /**\n   * @param {number} x\n   * @param {number} y\n   */\n\n\n  async tap(x, y) {\n    // Touches appear to be lost during the first frame after navigation.\n    // This waits a frame before sending the tap.\n    // @see https://crbug.com/613219\n    await this._client.send('Runtime.evaluate', {\n      expression: 'new Promise(x => requestAnimationFrame(() => requestAnimationFrame(x)))',\n      awaitPromise: true\n    });\n    const touchPoints = [{\n      x: Math.round(x),\n      y: Math.round(y)\n    }];\n    await this._client.send('Input.dispatchTouchEvent', {\n      type: 'touchStart',\n      touchPoints,\n      modifiers: this._keyboard._modifiers\n    });\n    await this._client.send('Input.dispatchTouchEvent', {\n      type: 'touchEnd',\n      touchPoints: [],\n      modifiers: this._keyboard._modifiers\n    });\n  }\n\n}\n\nmodule.exports = {\n  Keyboard,\n  Mouse,\n  Touchscreen\n};","map":{"version":3,"sources":["/Users/pro/Desktop/Projects/yesume/src/node_test/node_modules/puppeteer/lib/Input.js"],"names":["assert","require","keyDefinitions","Keyboard","constructor","client","_client","_modifiers","_pressedKeys","Set","down","key","options","text","undefined","description","_keyDescriptionForString","autoRepeat","has","code","add","_modifierBit","send","type","modifiers","windowsVirtualKeyCode","keyCode","unmodifiedText","location","isKeypad","keyString","shift","definition","shiftKey","shiftKeyCode","length","shiftText","up","delete","sendCharacter","char","delay","press","Promise","f","setTimeout","Mouse","keyboard","_keyboard","_x","_y","_button","move","x","y","steps","fromX","fromY","i","button","click","clickCount","Touchscreen","tap","expression","awaitPromise","touchPoints","Math","round","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the 'License');\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an 'AS IS' BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst {assert} = require('./helper');\nconst keyDefinitions = require('./USKeyboardLayout');\n\n/**\n * @typedef {Object} KeyDescription\n * @property {number} keyCode\n * @property {string} key\n * @property {string} text\n * @property {string} code\n * @property {number} location\n */\n\nclass Keyboard {\n  /**\n   * @param {!Puppeteer.CDPSession} client\n   */\n  constructor(client) {\n    this._client = client;\n    this._modifiers = 0;\n    this._pressedKeys = new Set();\n  }\n\n  /**\n   * @param {string} key\n   * @param {{text?: string}=} options\n   */\n  async down(key, options = { text: undefined }) {\n    const description = this._keyDescriptionForString(key);\n\n    const autoRepeat = this._pressedKeys.has(description.code);\n    this._pressedKeys.add(description.code);\n    this._modifiers |= this._modifierBit(description.key);\n\n    const text = options.text === undefined ? description.text : options.text;\n    await this._client.send('Input.dispatchKeyEvent', {\n      type: text ? 'keyDown' : 'rawKeyDown',\n      modifiers: this._modifiers,\n      windowsVirtualKeyCode: description.keyCode,\n      code: description.code,\n      key: description.key,\n      text: text,\n      unmodifiedText: text,\n      autoRepeat,\n      location: description.location,\n      isKeypad: description.location === 3\n    });\n  }\n\n  /**\n   * @param {string} key\n   * @return {number}\n   */\n  _modifierBit(key) {\n    if (key === 'Alt')\n      return 1;\n    if (key === 'Control')\n      return 2;\n    if (key === 'Meta')\n      return 4;\n    if (key === 'Shift')\n      return 8;\n    return 0;\n  }\n\n  /**\n   * @param {string} keyString\n   * @return {KeyDescription}\n   */\n  _keyDescriptionForString(keyString) {\n    const shift = this._modifiers & 8;\n    const description = {\n      key: '',\n      keyCode: 0,\n      code: '',\n      text: '',\n      location: 0\n    };\n\n    const definition = keyDefinitions[keyString];\n    assert(definition, `Unknown key: \"${keyString}\"`);\n\n    if (definition.key)\n      description.key = definition.key;\n    if (shift && definition.shiftKey)\n      description.key = definition.shiftKey;\n\n    if (definition.keyCode)\n      description.keyCode = definition.keyCode;\n    if (shift && definition.shiftKeyCode)\n      description.keyCode = definition.shiftKeyCode;\n\n    if (definition.code)\n      description.code = definition.code;\n\n    if (definition.location)\n      description.location = definition.location;\n\n    if (description.key.length === 1)\n      description.text = description.key;\n\n    if (definition.text)\n      description.text = definition.text;\n    if (shift && definition.shiftText)\n      description.text = definition.shiftText;\n\n    // if any modifiers besides shift are pressed, no text should be sent\n    if (this._modifiers & ~8)\n      description.text = '';\n\n    return description;\n  }\n\n  /**\n   * @param {string} key\n   */\n  async up(key) {\n    const description = this._keyDescriptionForString(key);\n\n    this._modifiers &= ~this._modifierBit(description.key);\n    this._pressedKeys.delete(description.code);\n    await this._client.send('Input.dispatchKeyEvent', {\n      type: 'keyUp',\n      modifiers: this._modifiers,\n      key: description.key,\n      windowsVirtualKeyCode: description.keyCode,\n      code: description.code,\n      location: description.location\n    });\n  }\n\n  /**\n   * @param {string} char\n   */\n  async sendCharacter(char) {\n    await this._client.send('Input.insertText', {text: char});\n  }\n\n  /**\n   * @param {string} text\n   * @param {{delay: (number|undefined)}=} options\n   */\n  async type(text, options) {\n    let delay = 0;\n    if (options && options.delay)\n      delay = options.delay;\n    for (const char of text) {\n      if (keyDefinitions[char])\n        await this.press(char, {delay});\n      else\n        await this.sendCharacter(char);\n      if (delay)\n        await new Promise(f => setTimeout(f, delay));\n    }\n  }\n\n  /**\n   * @param {string} key\n   * @param {!{delay?: number, text?: string}=} options\n   */\n  async press(key, options = {}) {\n    const {delay = null} = options;\n    await this.down(key, options);\n    if (delay !== null)\n      await new Promise(f => setTimeout(f, options.delay));\n    await this.up(key);\n  }\n}\n\nclass Mouse {\n  /**\n   * @param {Puppeteer.CDPSession} client\n   * @param {!Keyboard} keyboard\n   */\n  constructor(client, keyboard) {\n    this._client = client;\n    this._keyboard = keyboard;\n    this._x = 0;\n    this._y = 0;\n    /** @type {'none'|'left'|'right'|'middle'} */\n    this._button = 'none';\n  }\n\n  /**\n   * @param {number} x\n   * @param {number} y\n   * @param {!{steps?: number}=} options\n   */\n  async move(x, y, options = {}) {\n    const {steps = 1} = options;\n    const fromX = this._x, fromY = this._y;\n    this._x = x;\n    this._y = y;\n    for (let i = 1; i <= steps; i++) {\n      await this._client.send('Input.dispatchMouseEvent', {\n        type: 'mouseMoved',\n        button: this._button,\n        x: fromX + (this._x - fromX) * (i / steps),\n        y: fromY + (this._y - fromY) * (i / steps),\n        modifiers: this._keyboard._modifiers\n      });\n    }\n  }\n\n  /**\n   * @param {number} x\n   * @param {number} y\n   * @param {!{delay?: number, button?: \"left\"|\"right\"|\"middle\", clickCount?: number}=} options\n   */\n  async click(x, y, options = {}) {\n    const {delay = null} = options;\n    this.move(x, y);\n    this.down(options);\n    if (delay !== null)\n      await new Promise(f => setTimeout(f, delay));\n    await this.up(options);\n  }\n\n  /**\n   * @param {!{button?: \"left\"|\"right\"|\"middle\", clickCount?: number}=} options\n   */\n  async down(options = {}) {\n    const {button = 'left', clickCount = 1} = options;\n    this._button = button;\n    await this._client.send('Input.dispatchMouseEvent', {\n      type: 'mousePressed',\n      button,\n      x: this._x,\n      y: this._y,\n      modifiers: this._keyboard._modifiers,\n      clickCount\n    });\n  }\n\n  /**\n   * @param {!{button?: \"left\"|\"right\"|\"middle\", clickCount?: number}=} options\n   */\n  async up(options = {}) {\n    const {button = 'left', clickCount = 1} = options;\n    this._button = 'none';\n    await this._client.send('Input.dispatchMouseEvent', {\n      type: 'mouseReleased',\n      button,\n      x: this._x,\n      y: this._y,\n      modifiers: this._keyboard._modifiers,\n      clickCount\n    });\n  }\n}\n\nclass Touchscreen {\n  /**\n   * @param {Puppeteer.CDPSession} client\n   * @param {Keyboard} keyboard\n   */\n  constructor(client, keyboard) {\n    this._client = client;\n    this._keyboard = keyboard;\n  }\n\n  /**\n   * @param {number} x\n   * @param {number} y\n   */\n  async tap(x, y) {\n    // Touches appear to be lost during the first frame after navigation.\n    // This waits a frame before sending the tap.\n    // @see https://crbug.com/613219\n    await this._client.send('Runtime.evaluate', {\n      expression: 'new Promise(x => requestAnimationFrame(() => requestAnimationFrame(x)))',\n      awaitPromise: true\n    });\n\n    const touchPoints = [{x: Math.round(x), y: Math.round(y)}];\n    await this._client.send('Input.dispatchTouchEvent', {\n      type: 'touchStart',\n      touchPoints,\n      modifiers: this._keyboard._modifiers\n    });\n    await this._client.send('Input.dispatchTouchEvent', {\n      type: 'touchEnd',\n      touchPoints: [],\n      modifiers: this._keyboard._modifiers\n    });\n  }\n}\n\nmodule.exports = { Keyboard, Mouse, Touchscreen};\n"]},"metadata":{},"sourceType":"module"}