{"ast":null,"code":"/**\n * create-logger.js: Logger factory for winston logger instances.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n'use strict';\n\nconst {\n  LEVEL\n} = require('triple-beam');\n\nconst config = require('./config');\n\nconst Logger = require('./logger');\n\nconst debug = require('diagnostics')('winston:create-logger');\n/**\n * DerivedLogger to attach the logs level methods.\n * @type {DerivedLogger}\n * @extends {Logger}\n */\n\n\nclass DerivedLogger extends Logger {\n  /**\n   * Create a new class derived logger for which the levels can be attached to\n   * the prototype of. This is a V8 optimization that is well know to increase\n   * performance of prototype functions.\n   * @param {!Object} options - Options for the created logger.\n   */\n  constructor(options) {\n    super(options);\n\n    this._setupLevels();\n  }\n  /**\n   * Create the log level methods for the derived logger.\n   * @returns {undefined}\n   * @private\n   */\n\n\n  _setupLevels() {\n    Object.keys(this.levels).forEach(level => {\n      debug('Define prototype method for \"%s\"', level);\n\n      if (level === 'log') {\n        // eslint-disable-next-line no-console\n        console.warn('Level \"log\" not defined: conflicts with the method \"log\". Use a different level name.');\n        return;\n      } // Define prototype methods for each log level\n      // e.g. logger.log('info', msg) <––> logger.info(msg) & logger.isInfoEnabled()\n\n\n      this[level] = (...args) => {\n        // Optimize the hot-path which is the single object.\n        if (args.length === 1) {\n          const [msg] = args;\n          const info = msg && msg.message && msg || {\n            message: msg\n          };\n          info.level = info[LEVEL] = level;\n          this.write(info);\n          return this;\n        } // Otherwise build argument list which could potentially conform to\n        // either:\n        // . v3 API: log(obj)\n        // 2. v1/v2 API: log(level, msg, ... [string interpolate], [{metadata}], [callback])\n\n\n        return this.log(level, ...args);\n      };\n\n      this[isLevelEnabledFunctionName(level)] = () => this.isLevelEnabled(level);\n    });\n  }\n\n}\n\nfunction isLevelEnabledFunctionName(level) {\n  return 'is' + level.charAt(0).toUpperCase() + level.slice(1) + 'Enabled';\n}\n/**\n * Create a new instance of a winston Logger. Creates a new\n * prototype for each instance.\n * @param {!Object} opts - Options for the created logger.\n * @returns {Logger} - A newly created logger instance.\n */\n\n\nmodule.exports = (opts = {\n  levels: config.npm.levels\n}) => new DerivedLogger(opts);","map":{"version":3,"sources":["/Users/pro/Desktop/Projects/yesume/src/node_test/node_modules/winston/lib/winston/create-logger.js"],"names":["LEVEL","require","config","Logger","debug","DerivedLogger","constructor","options","_setupLevels","Object","keys","levels","forEach","level","console","warn","args","length","msg","info","message","write","log","isLevelEnabledFunctionName","isLevelEnabled","charAt","toUpperCase","slice","module","exports","opts","npm"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAYC,OAAO,CAAC,aAAD,CAAzB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAME,MAAM,GAAGF,OAAO,CAAC,UAAD,CAAtB;;AACA,MAAMG,KAAK,GAAGH,OAAO,CAAC,aAAD,CAAP,CAAuB,uBAAvB,CAAd;AAEA;AACA;AACA;AACA;AACA;;;AACA,MAAMI,aAAN,SAA4BF,MAA5B,CAAmC;AACjC;AACF;AACA;AACA;AACA;AACA;AACEG,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnB,UAAMA,OAAN;;AACA,SAAKC,YAAL;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEA,EAAAA,YAAY,GAAG;AACbC,IAAAA,MAAM,CAACC,IAAP,CAAY,KAAKC,MAAjB,EAAyBC,OAAzB,CAAiCC,KAAK,IAAI;AACxCT,MAAAA,KAAK,CAAC,kCAAD,EAAqCS,KAArC,CAAL;;AACA,UAAIA,KAAK,KAAK,KAAd,EAAqB;AACnB;AACAC,QAAAA,OAAO,CAACC,IAAR,CAAa,uFAAb;AACA;AACD,OANuC,CAQxC;AACA;;;AACA,WAAKF,KAAL,IAAc,CAAC,GAAGG,IAAJ,KAAa;AACzB;AACA,YAAIA,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB;AACrB,gBAAM,CAACC,GAAD,IAAQF,IAAd;AACA,gBAAMG,IAAI,GAAGD,GAAG,IAAIA,GAAG,CAACE,OAAX,IAAsBF,GAAtB,IAA6B;AAAEE,YAAAA,OAAO,EAAEF;AAAX,WAA1C;AACAC,UAAAA,IAAI,CAACN,KAAL,GAAaM,IAAI,CAACnB,KAAD,CAAJ,GAAca,KAA3B;AACA,eAAKQ,KAAL,CAAWF,IAAX;AACA,iBAAO,IAAP;AACD,SARwB,CAUzB;AACA;AACA;AACA;;;AACA,eAAO,KAAKG,GAAL,CAAST,KAAT,EAAgB,GAAGG,IAAnB,CAAP;AACD,OAfD;;AAiBA,WAAKO,0BAA0B,CAACV,KAAD,CAA/B,IAA0C,MAAM,KAAKW,cAAL,CAAoBX,KAApB,CAAhD;AACD,KA5BD;AA6BD;;AA/CgC;;AAkDnC,SAASU,0BAAT,CAAoCV,KAApC,EAA2C;AACzC,SAAO,OAAOA,KAAK,CAACY,MAAN,CAAa,CAAb,EAAgBC,WAAhB,EAAP,GAAuCb,KAAK,CAACc,KAAN,CAAY,CAAZ,CAAvC,GAAwD,SAA/D;AACD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACAC,MAAM,CAACC,OAAP,GAAiB,CAACC,IAAI,GAAG;AAAEnB,EAAAA,MAAM,EAAET,MAAM,CAAC6B,GAAP,CAAWpB;AAArB,CAAR,KACf,IAAIN,aAAJ,CAAkByB,IAAlB,CADF","sourcesContent":["/**\n * create-logger.js: Logger factory for winston logger instances.\n *\n * (C) 2010 Charlie Robbins\n * MIT LICENCE\n */\n\n'use strict';\n\nconst { LEVEL } = require('triple-beam');\nconst config = require('./config');\nconst Logger = require('./logger');\nconst debug = require('diagnostics')('winston:create-logger');\n\n/**\n * DerivedLogger to attach the logs level methods.\n * @type {DerivedLogger}\n * @extends {Logger}\n */\nclass DerivedLogger extends Logger {\n  /**\n   * Create a new class derived logger for which the levels can be attached to\n   * the prototype of. This is a V8 optimization that is well know to increase\n   * performance of prototype functions.\n   * @param {!Object} options - Options for the created logger.\n   */\n  constructor(options) {\n    super(options);\n    this._setupLevels();\n  }\n\n  /**\n   * Create the log level methods for the derived logger.\n   * @returns {undefined}\n   * @private\n   */\n  _setupLevels() {\n    Object.keys(this.levels).forEach(level => {\n      debug('Define prototype method for \"%s\"', level);\n      if (level === 'log') {\n        // eslint-disable-next-line no-console\n        console.warn('Level \"log\" not defined: conflicts with the method \"log\". Use a different level name.');\n        return;\n      }\n\n      // Define prototype methods for each log level\n      // e.g. logger.log('info', msg) <––> logger.info(msg) & logger.isInfoEnabled()\n      this[level] = (...args) => {\n        // Optimize the hot-path which is the single object.\n        if (args.length === 1) {\n          const [msg] = args;\n          const info = msg && msg.message && msg || { message: msg };\n          info.level = info[LEVEL] = level;\n          this.write(info);\n          return this;\n        }\n\n        // Otherwise build argument list which could potentially conform to\n        // either:\n        // . v3 API: log(obj)\n        // 2. v1/v2 API: log(level, msg, ... [string interpolate], [{metadata}], [callback])\n        return this.log(level, ...args);\n      };\n\n      this[isLevelEnabledFunctionName(level)] = () => this.isLevelEnabled(level);\n    });\n  }\n}\n\nfunction isLevelEnabledFunctionName(level) {\n  return 'is' + level.charAt(0).toUpperCase() + level.slice(1) + 'Enabled';\n}\n\n/**\n * Create a new instance of a winston Logger. Creates a new\n * prototype for each instance.\n * @param {!Object} opts - Options for the created logger.\n * @returns {Logger} - A newly created logger instance.\n */\nmodule.exports = (opts = { levels: config.npm.levels }) => (\n  new DerivedLogger(opts)\n);\n"]},"metadata":{},"sourceType":"module"}