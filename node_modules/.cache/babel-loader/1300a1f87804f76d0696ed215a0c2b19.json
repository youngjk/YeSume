{"ast":null,"code":"/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst {\n  helper,\n  assert\n} = require('./helper');\n\nconst fs = require('fs');\n\nconst openAsync = helper.promisify(fs.open);\nconst writeAsync = helper.promisify(fs.write);\nconst closeAsync = helper.promisify(fs.close);\n\nclass Tracing {\n  /**\n   * @param {!Puppeteer.CDPSession} client\n   */\n  constructor(client) {\n    this._client = client;\n    this._recording = false;\n    this._path = '';\n  }\n  /**\n   * @param {!{path: string, screenshots?: boolean, categories?: !Array<string>}} options\n   */\n\n\n  async start(options) {\n    assert(!this._recording, 'Cannot start recording trace while already recording trace.');\n    const defaultCategories = ['-*', 'devtools.timeline', 'v8.execute', 'disabled-by-default-devtools.timeline', 'disabled-by-default-devtools.timeline.frame', 'toplevel', 'blink.console', 'blink.user_timing', 'latencyInfo', 'disabled-by-default-devtools.timeline.stack', 'disabled-by-default-v8.cpu_profiler', 'disabled-by-default-v8.cpu_profiler.hires'];\n    const {\n      path = null,\n      screenshots = false,\n      categories = defaultCategories\n    } = options;\n    if (screenshots) categories.push('disabled-by-default-devtools.screenshot');\n    this._path = path;\n    this._recording = true;\n    await this._client.send('Tracing.start', {\n      transferMode: 'ReturnAsStream',\n      categories: categories.join(',')\n    });\n  }\n  /**\n   * @return {!Promise<!Buffer>}\n   */\n\n\n  async stop() {\n    let fulfill;\n    const contentPromise = new Promise(x => fulfill = x);\n\n    this._client.once('Tracing.tracingComplete', event => {\n      this._readStream(event.stream, this._path).then(fulfill);\n    });\n\n    await this._client.send('Tracing.end');\n    this._recording = false;\n    return contentPromise;\n  }\n  /**\n   * @param {string} handle\n   * @param {string} path\n   */\n\n\n  async _readStream(handle, path) {\n    let eof = false;\n    let file;\n    if (path) file = await openAsync(path, 'w');\n    const bufs = [];\n\n    while (!eof) {\n      const response = await this._client.send('IO.read', {\n        handle\n      });\n      eof = response.eof;\n      bufs.push(Buffer.from(response.data));\n      if (path) await writeAsync(file, response.data);\n    }\n\n    if (path) await closeAsync(file);\n    await this._client.send('IO.close', {\n      handle\n    });\n    let resultBuffer = null;\n\n    try {\n      resultBuffer = Buffer.concat(bufs);\n    } finally {\n      return resultBuffer;\n    }\n  }\n\n}\n\nmodule.exports = Tracing;","map":{"version":3,"sources":["/Users/pro/Desktop/Projects/yesume/node_modules/puppeteer/lib/Tracing.js"],"names":["helper","assert","require","fs","openAsync","promisify","open","writeAsync","write","closeAsync","close","Tracing","constructor","client","_client","_recording","_path","start","options","defaultCategories","path","screenshots","categories","push","send","transferMode","join","stop","fulfill","contentPromise","Promise","x","once","event","_readStream","stream","then","handle","eof","file","bufs","response","Buffer","from","data","resultBuffer","concat","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright 2017 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst {helper, assert} = require('./helper');\nconst fs = require('fs');\n\nconst openAsync = helper.promisify(fs.open);\nconst writeAsync = helper.promisify(fs.write);\nconst closeAsync = helper.promisify(fs.close);\n\nclass Tracing {\n  /**\n   * @param {!Puppeteer.CDPSession} client\n   */\n  constructor(client) {\n    this._client = client;\n    this._recording = false;\n    this._path = '';\n  }\n\n  /**\n   * @param {!{path: string, screenshots?: boolean, categories?: !Array<string>}} options\n   */\n  async start(options) {\n    assert(!this._recording, 'Cannot start recording trace while already recording trace.');\n\n    const defaultCategories = [\n      '-*', 'devtools.timeline', 'v8.execute', 'disabled-by-default-devtools.timeline',\n      'disabled-by-default-devtools.timeline.frame', 'toplevel',\n      'blink.console', 'blink.user_timing', 'latencyInfo', 'disabled-by-default-devtools.timeline.stack',\n      'disabled-by-default-v8.cpu_profiler', 'disabled-by-default-v8.cpu_profiler.hires'\n    ];\n    const {\n      path = null,\n      screenshots = false,\n      categories = defaultCategories,\n    } = options;\n\n    if (screenshots)\n      categories.push('disabled-by-default-devtools.screenshot');\n\n    this._path = path;\n    this._recording = true;\n    await this._client.send('Tracing.start', {\n      transferMode: 'ReturnAsStream',\n      categories: categories.join(',')\n    });\n  }\n\n  /**\n   * @return {!Promise<!Buffer>}\n   */\n  async stop() {\n    let fulfill;\n    const contentPromise = new Promise(x => fulfill = x);\n    this._client.once('Tracing.tracingComplete', event => {\n      this._readStream(event.stream, this._path).then(fulfill);\n    });\n    await this._client.send('Tracing.end');\n    this._recording = false;\n    return contentPromise;\n  }\n\n  /**\n   * @param {string} handle\n   * @param {string} path\n   */\n  async _readStream(handle, path) {\n    let eof = false;\n    let file;\n    if (path)\n      file = await openAsync(path, 'w');\n    const bufs = [];\n    while (!eof) {\n      const response = await this._client.send('IO.read', {handle});\n      eof = response.eof;\n      bufs.push(Buffer.from(response.data));\n      if (path)\n        await writeAsync(file, response.data);\n    }\n    if (path)\n      await closeAsync(file);\n    await this._client.send('IO.close', {handle});\n    let resultBuffer = null;\n    try {\n      resultBuffer = Buffer.concat(bufs);\n    } finally {\n      return resultBuffer;\n    }\n  }\n}\n\nmodule.exports = Tracing;\n"]},"metadata":{},"sourceType":"script"}