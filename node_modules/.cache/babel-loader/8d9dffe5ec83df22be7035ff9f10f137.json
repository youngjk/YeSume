{"ast":null,"code":"/**\n * Copyright 2018 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst EventEmitter = require('events');\n\nconst {\n  debugError\n} = require('./helper');\n\nconst {\n  ExecutionContext\n} = require('./ExecutionContext');\n\nconst {\n  JSHandle\n} = require('./JSHandle');\n\nclass Worker extends EventEmitter {\n  /**\n   * @param {Puppeteer.CDPSession} client\n   * @param {string} url\n   * @param {function(string, !Array<!JSHandle>, Protocol.Runtime.StackTrace=):void} consoleAPICalled\n   * @param {function(!Protocol.Runtime.ExceptionDetails):void} exceptionThrown\n   */\n  constructor(client, url, consoleAPICalled, exceptionThrown) {\n    super();\n    this._client = client;\n    this._url = url;\n    this._executionContextPromise = new Promise(x => this._executionContextCallback = x);\n    /** @type {function(!Protocol.Runtime.RemoteObject):!JSHandle} */\n\n    let jsHandleFactory;\n\n    this._client.once('Runtime.executionContextCreated', async event => {\n      jsHandleFactory = remoteObject => new JSHandle(executionContext, client, remoteObject);\n\n      const executionContext = new ExecutionContext(client, event.context, null);\n\n      this._executionContextCallback(executionContext);\n    }); // This might fail if the target is closed before we recieve all execution contexts.\n\n\n    this._client.send('Runtime.enable', {}).catch(debugError);\n\n    this._client.on('Runtime.consoleAPICalled', event => consoleAPICalled(event.type, event.args.map(jsHandleFactory), event.stackTrace));\n\n    this._client.on('Runtime.exceptionThrown', exception => exceptionThrown(exception.exceptionDetails));\n  }\n  /**\n   * @return {string}\n   */\n\n\n  url() {\n    return this._url;\n  }\n  /**\n   * @return {!Promise<ExecutionContext>}\n   */\n\n\n  async executionContext() {\n    return this._executionContextPromise;\n  }\n  /**\n   * @param {Function|string} pageFunction\n   * @param {!Array<*>} args\n   * @return {!Promise<*>}\n   */\n\n\n  async evaluate(pageFunction, ...args) {\n    return (await this._executionContextPromise).evaluate(pageFunction, ...args);\n  }\n  /**\n   * @param {Function|string} pageFunction\n   * @param {!Array<*>} args\n   * @return {!Promise<!JSHandle>}\n   */\n\n\n  async evaluateHandle(pageFunction, ...args) {\n    return (await this._executionContextPromise).evaluateHandle(pageFunction, ...args);\n  }\n\n}\n\nmodule.exports = {\n  Worker\n};","map":{"version":3,"sources":["/Users/pro/Desktop/Projects/yesume/node_modules/puppeteer/lib/Worker.js"],"names":["EventEmitter","require","debugError","ExecutionContext","JSHandle","Worker","constructor","client","url","consoleAPICalled","exceptionThrown","_client","_url","_executionContextPromise","Promise","x","_executionContextCallback","jsHandleFactory","once","event","remoteObject","executionContext","context","send","catch","on","type","args","map","stackTrace","exception","exceptionDetails","evaluate","pageFunction","evaluateHandle","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,YAAY,GAAGC,OAAO,CAAC,QAAD,CAA5B;;AACA,MAAM;AAACC,EAAAA;AAAD,IAAeD,OAAO,CAAC,UAAD,CAA5B;;AACA,MAAM;AAACE,EAAAA;AAAD,IAAqBF,OAAO,CAAC,oBAAD,CAAlC;;AACA,MAAM;AAACG,EAAAA;AAAD,IAAaH,OAAO,CAAC,YAAD,CAA1B;;AAEA,MAAMI,MAAN,SAAqBL,YAArB,CAAkC;AAChC;AACF;AACA;AACA;AACA;AACA;AACEM,EAAAA,WAAW,CAACC,MAAD,EAASC,GAAT,EAAcC,gBAAd,EAAgCC,eAAhC,EAAiD;AAC1D;AACA,SAAKC,OAAL,GAAeJ,MAAf;AACA,SAAKK,IAAL,GAAYJ,GAAZ;AACA,SAAKK,wBAAL,GAAgC,IAAIC,OAAJ,CAAYC,CAAC,IAAI,KAAKC,yBAAL,GAAiCD,CAAlD,CAAhC;AACA;;AACA,QAAIE,eAAJ;;AACA,SAAKN,OAAL,CAAaO,IAAb,CAAkB,iCAAlB,EAAqD,MAAMC,KAAN,IAAe;AAClEF,MAAAA,eAAe,GAAGG,YAAY,IAAI,IAAIhB,QAAJ,CAAaiB,gBAAb,EAA+Bd,MAA/B,EAAuCa,YAAvC,CAAlC;;AACA,YAAMC,gBAAgB,GAAG,IAAIlB,gBAAJ,CAAqBI,MAArB,EAA6BY,KAAK,CAACG,OAAnC,EAA4C,IAA5C,CAAzB;;AACA,WAAKN,yBAAL,CAA+BK,gBAA/B;AACD,KAJD,EAP0D,CAY1D;;;AACA,SAAKV,OAAL,CAAaY,IAAb,CAAkB,gBAAlB,EAAoC,EAApC,EAAwCC,KAAxC,CAA8CtB,UAA9C;;AAEA,SAAKS,OAAL,CAAac,EAAb,CAAgB,0BAAhB,EAA4CN,KAAK,IAAIV,gBAAgB,CAACU,KAAK,CAACO,IAAP,EAAaP,KAAK,CAACQ,IAAN,CAAWC,GAAX,CAAeX,eAAf,CAAb,EAA8CE,KAAK,CAACU,UAApD,CAArE;;AACA,SAAKlB,OAAL,CAAac,EAAb,CAAgB,yBAAhB,EAA2CK,SAAS,IAAIpB,eAAe,CAACoB,SAAS,CAACC,gBAAX,CAAvE;AACD;AAED;AACF;AACA;;;AACEvB,EAAAA,GAAG,GAAG;AACJ,WAAO,KAAKI,IAAZ;AACD;AAED;AACF;AACA;;;AACwB,QAAhBS,gBAAgB,GAAG;AACvB,WAAO,KAAKR,wBAAZ;AACD;AAED;AACF;AACA;AACA;AACA;;;AACgB,QAARmB,QAAQ,CAACC,YAAD,EAAe,GAAGN,IAAlB,EAAwB;AACpC,WAAO,CAAC,MAAM,KAAKd,wBAAZ,EAAsCmB,QAAtC,CAA+CC,YAA/C,EAA6D,GAAGN,IAAhE,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACsB,QAAdO,cAAc,CAACD,YAAD,EAAe,GAAGN,IAAlB,EAAwB;AAC1C,WAAO,CAAC,MAAM,KAAKd,wBAAZ,EAAsCqB,cAAtC,CAAqDD,YAArD,EAAmE,GAAGN,IAAtE,CAAP;AACD;;AAxD+B;;AA2DlCQ,MAAM,CAACC,OAAP,GAAiB;AAAC/B,EAAAA;AAAD,CAAjB","sourcesContent":["/**\n * Copyright 2018 Google Inc. All rights reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nconst EventEmitter = require('events');\nconst {debugError} = require('./helper');\nconst {ExecutionContext} = require('./ExecutionContext');\nconst {JSHandle} = require('./JSHandle');\n\nclass Worker extends EventEmitter {\n  /**\n   * @param {Puppeteer.CDPSession} client\n   * @param {string} url\n   * @param {function(string, !Array<!JSHandle>, Protocol.Runtime.StackTrace=):void} consoleAPICalled\n   * @param {function(!Protocol.Runtime.ExceptionDetails):void} exceptionThrown\n   */\n  constructor(client, url, consoleAPICalled, exceptionThrown) {\n    super();\n    this._client = client;\n    this._url = url;\n    this._executionContextPromise = new Promise(x => this._executionContextCallback = x);\n    /** @type {function(!Protocol.Runtime.RemoteObject):!JSHandle} */\n    let jsHandleFactory;\n    this._client.once('Runtime.executionContextCreated', async event => {\n      jsHandleFactory = remoteObject => new JSHandle(executionContext, client, remoteObject);\n      const executionContext = new ExecutionContext(client, event.context, null);\n      this._executionContextCallback(executionContext);\n    });\n    // This might fail if the target is closed before we recieve all execution contexts.\n    this._client.send('Runtime.enable', {}).catch(debugError);\n\n    this._client.on('Runtime.consoleAPICalled', event => consoleAPICalled(event.type, event.args.map(jsHandleFactory), event.stackTrace));\n    this._client.on('Runtime.exceptionThrown', exception => exceptionThrown(exception.exceptionDetails));\n  }\n\n  /**\n   * @return {string}\n   */\n  url() {\n    return this._url;\n  }\n\n  /**\n   * @return {!Promise<ExecutionContext>}\n   */\n  async executionContext() {\n    return this._executionContextPromise;\n  }\n\n  /**\n   * @param {Function|string} pageFunction\n   * @param {!Array<*>} args\n   * @return {!Promise<*>}\n   */\n  async evaluate(pageFunction, ...args) {\n    return (await this._executionContextPromise).evaluate(pageFunction, ...args);\n  }\n\n  /**\n   * @param {Function|string} pageFunction\n   * @param {!Array<*>} args\n   * @return {!Promise<!JSHandle>}\n   */\n  async evaluateHandle(pageFunction, ...args) {\n    return (await this._executionContextPromise).evaluateHandle(pageFunction, ...args);\n  }\n}\n\nmodule.exports = {Worker};\n"]},"metadata":{},"sourceType":"script"}